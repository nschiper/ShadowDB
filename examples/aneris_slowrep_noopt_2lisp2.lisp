(defun nvbtrue ()
(make-inl :val (make-axiom)))

(defun nvbfalse ()
(make-inr :val (make-axiom)))

(defun nveq_atom (nvx nvy)
(if (string= nvx nvy)
(nvbtrue)
(nvbfalse)))

(defun nvatom-deq ()
(lambda (nva)
(lambda (nvb)
(nveq_atom nva nvb))))

(defun nvband (nvp nvq)
(if (inl-p nvp)
nvq
(nvbfalse)))

(defun nvnull (nvas)
(funcall (fix (lambda (nvlist_ind)
(declare (ignore nvlist_ind))
(lambda (nvL)
(if (pair-p nvL)
(let ((pair nvL))
(let ((nvh (pair-fst pair))
(nvt (pair-snd pair)))
(declare (ignore nvh))
(declare (ignore nvt))
(nvbfalse)))
(if (axiom-p nvL)
(nvbtrue)
(error "bottom"))))))
nvas))

(defun nvlist-deq (nveq)
(lambda (nvas)
(lambda (nvbs)
(funcall (funcall (fix (lambda (nvlist_ind)
(lambda (nvL)
(if (pair-p nvL)
(let ((pair nvL))
(let ((nvh (pair-fst pair))
(nvt (pair-snd pair)))
(lambda (nvL)
(funcall (fix (lambda (nvlist_ind_)
(declare (ignore nvlist_ind_))
(lambda (nvL)
(if (pair-p nvL)
(let ((pair nvL))
(let ((nvh_ (pair-fst pair))
(nvt_ (pair-snd pair)))
(nvband (funcall (funcall nveq
nvh)
nvh_) (funcall (funcall (funcall nvlist_ind)
nvt)
nvt_))))
(if (axiom-p nvL)
(nvbfalse)
(error "bottom"))))))
nvL))))
(if (axiom-p nvL)
(lambda (nvL)
(nvnull nvL))
(error "bottom"))))))
nvas)
nvbs))))

(defun nvname-deq ()
(nvlist-deq (nvatom-deq)))

(defun nvname_eq (nvx nvy)
(funcall (funcall (nvname-deq)
nvx)
nvy))

(defun nvaneris_pax_v1_Ballot_Num ()
"UNION")

(defun nvId ()
"ATOM")

(defun nvaneris_v1_full_headers_fun (nvCid nvOp)
(declare (ignore nvCid))
(declare (ignore nvOp))
(lambda (nvhdr)
(if (inl-p (nvname_eq nvhdr (make-pair :fst "bcast" :snd (make-axiom))))
"PRODUCT"
(if (inl-p (nvname_eq nvhdr (make-pair :fst "swap" :snd (make-axiom))))
"PRODUCT"
(if (inl-p (nvname_eq nvhdr (make-pair :fst "aneris" :snd (make-pair :fst "pax" :snd (make-pair :fst "propose" :snd (make-axiom))))))
"PRODUCT"
(if (inl-p (nvname_eq nvhdr (make-pair :fst "aneris" :snd (make-pair :fst "23" :snd (make-pair :fst "propose" :snd (make-axiom))))))
"PRODUCT"
(if (inl-p (nvname_eq nvhdr (make-pair :fst "aneris" :snd (make-pair :fst "decision" :snd (make-axiom)))))
"PRODUCT"
(if (inl-p (nvname_eq nvhdr (make-pair :fst "response" :snd (make-axiom))))
"PRODUCT"
(if (inl-p (nvname_eq nvhdr (make-pair :fst "aneris_pax_v1" :snd (make-pair :fst "p1a" :snd (make-axiom)))))
"PRODUCT"
(if (inl-p (nvname_eq nvhdr (make-pair :fst "aneris_pax_v1" :snd (make-pair :fst "p1b" :snd (make-axiom)))))
"PRODUCT"
(if (inl-p (nvname_eq nvhdr (make-pair :fst "aneris_pax_v1" :snd (make-pair :fst "p2a" :snd (make-axiom)))))
"PRODUCT"
(if (inl-p (nvname_eq nvhdr (make-pair :fst "aneris_pax_v1" :snd (make-pair :fst "p2b" :snd (make-axiom)))))
"PRODUCT"
(if (inl-p (nvname_eq nvhdr (make-pair :fst "aneris_pax_v1" :snd (make-pair :fst "preempted" :snd (make-axiom)))))
(nvaneris_pax_v1_Ballot_Num)
(if (inl-p (nvname_eq nvhdr (make-pair :fst "aneris_pax_v1" :snd (make-pair :fst "adopted" :snd (make-axiom)))))
"PRODUCT"
(if (inl-p (nvname_eq nvhdr (make-pair :fst "aneris_pax_v1" :snd (make-pair :fst "ping" :snd (make-axiom)))))
(nvId)
(if (inl-p (nvname_eq nvhdr (make-pair :fst "aneris_pax_v1" :snd (make-pair :fst "pong" :snd (make-axiom)))))
"EQUAL"
(if (inl-p (nvname_eq nvhdr (make-pair :fst "aneris_pax_v1" :snd (make-pair :fst "react" :snd (make-axiom)))))
"EQUAL"
(if (inl-p (nvname_eq nvhdr (make-pair :fst "aneris_pax_v1" :snd (make-pair :fst "start" :snd (make-axiom)))))
"EQUAL"
(if (inl-p (nvname_eq nvhdr (make-pair :fst "aneris_pax_v1" :snd (make-pair :fst "decided" :snd (make-axiom)))))
"INT"
(if (inl-p (nvname_eq nvhdr (make-pair :fst "aneris_23_v1" :snd (make-pair :fst "vote" :snd (make-axiom)))))
"PRODUCT"
(if (inl-p (nvname_eq nvhdr (make-pair :fst "aneris_23_v1" :snd (make-pair :fst "retry" :snd (make-axiom)))))
"PRODUCT"
(if (inl-p (nvname_eq nvhdr (make-pair :fst "aneris_23_v1" :snd (make-pair :fst "decided" :snd (make-axiom)))))
"PRODUCT"
"VOID"))))))))))))))))))))))

(defun nvlt_int (nvi nvj)
(if (< nvi nvj)
(nvbtrue)
(nvbfalse)))

(defun nvbnot (nvb)
(if (inl-p nvb)
(nvbfalse)
(nvbtrue)))

(defun nvle_int (nvi nvj)
(nvbnot (nvlt_int nvj nvi)))

(defun nvaneris_pax_v1_higher_leader (nvldrs nvldrs_uid)
(lambda (nvloc)
(funcall (lambda (nvx)
(funcall (funcall (fix (lambda (nvlist_accum)
(lambda (nvy)
(lambda (nvL)
(if (pair-p nvL)
(let ((pair nvL))
(let ((nvh (pair-fst pair))
(nvt (pair-snd pair)))
(funcall (funcall (funcall nvlist_accum)
(funcall (lambda (nvx_)
(if (inl-p (nvle_int nvx_ nvx))
nvy
(let ((dec nvy))
(if (inl-p dec)
(let ((nvl (inl-val dec)))
(if (inl-p (nvlt_int nvx_ (funcall nvldrs_uid
nvl)))
(make-inl :val nvh)
nvy))
(if (inr-p dec)
(let ((nvz (inr-val dec)))
(declare (ignore nvz))
(make-inl :val nvh))
(error "decide:an_injection_should_be_a_list_with_header_inl_or_inr"))))))
(funcall nvldrs_uid
nvh)))
nvt)))
(if (axiom-p nvL)
nvy
(error "bottom")))))))
(make-inr :val (make-axiom)))
nvldrs))
(funcall nvldrs_uid
nvloc))))

(defun nvsingle-bag (nvx)
(make-pair :fst nvx :snd (make-axiom)))

(defun nvhdf-halt ()
(make-inr :val (make-axiom)))

(defun nvhdf-run (nvP)
(make-inl :val nvP))

(defun nvhdf-return (nvx)
(nvhdf-run (lambda (nvm)
(declare (ignore nvm))
(make-pair :fst (nvhdf-halt) :snd nvx))))

(defun nvreturn-loc-bag-class-program (nvx)
(lambda (nvi)
(nvhdf-return (funcall nvx
nvi))))

(defun nvaneris_pax_v1_HigherLeader-program (nvCmd nvdecision nvldrs nvldrs_uid nvpropose nvzs)
(declare (ignore nvCmd))
(declare (ignore nvdecision))
(declare (ignore nvpropose))
(declare (ignore nvzs))
(nvreturn-loc-bag-class-program (lambda (nvldr)
(nvsingle-bag (funcall (nvaneris_pax_v1_higher_leader nvldrs nvldrs_uid)
nvldr)))))

(defun nvmake-Msg (nvhdr nvval)
(make-pair :fst nvhdr :snd nvval))

(defun nvmake-msg-interface (nvi nvl nvm)
(make-pair :fst nvi :snd (make-pair :fst nvl :snd nvm)))

(defun nvmk-msg-interface (nvl nvm)
(nvmake-msg-interface 0 nvl nvm))

(defun nvaneris_pax_v1_ping_send (nvCmd nvdecision nvpropose nvzs)
(declare (ignore nvCmd))
(declare (ignore nvdecision))
(declare (ignore nvpropose))
(declare (ignore nvzs))
(lambda (nvl)
(lambda (nvz)
(nvmk-msg-interface nvl (nvmake-Msg (make-pair :fst "aneris_pax_v1" :snd (make-pair :fst "ping" :snd (make-axiom))) nvz)))))

(defun nvaneris_pax_v1_react__send (nvCmd nvdecision nvpropose nvzs)
(declare (ignore nvCmd))
(declare (ignore nvdecision))
(declare (ignore nvpropose))
(declare (ignore nvzs))
(lambda (nvn)
(lambda (nvl)
(lambda (nvz)
(nvmake-msg-interface nvn nvl (nvmake-Msg (make-pair :fst "aneris_pax_v1" :snd (make-pair :fst "react" :snd (make-axiom))) nvz))))))

(defun nvisr (nvx)
(let ((dec nvx))
(if (inl-p dec)
(let ((nvy (inl-val dec)))
(declare (ignore nvy))
(nvbfalse))
(if (inr-p dec)
(let ((nvz (inr-val dec)))
(declare (ignore nvz))
(nvbtrue))
(error "decide:an_injection_should_be_a_list_with_header_inl_or_inr")))))

(defun nvhdf-halted (nvP)
(nvisr nvP))

(defun nvhdf-ap (nvX nva)
(let ((dec nvX))
(if (inl-p dec)
(let ((nvP (inl-val dec)))
(funcall nvP
nva))
(if (inr-p dec)
(let ((nvz (inr-val dec)))
(declare (ignore nvz))
(make-pair :fst (make-inr :val (make-axiom)) :snd (make-axiom)))
(error "decide:an_injection_should_be_a_list_with_header_inl_or_inr")))))

(defun nvappend (nvas nvbs)
(funcall (fix (lambda (nvlist_ind)
(lambda (nvL)
(if (pair-p nvL)
(let ((pair nvL))
(let ((nvh (pair-fst pair))
(nvt (pair-snd pair)))
(make-pair :fst nvh :snd (funcall (funcall nvlist_ind)
nvt))))
(if (axiom-p nvL)
nvbs
(error "bottom"))))))
nvas))

(defun nvbag-append (nvas nvbs)
(nvappend nvas nvbs))

(defun nvhdf-parallel (nvX nvY)
(funcall (fix (lambda (nvmk-hdf)
(lambda (nvs0)
(if (inl-p (let ((pair nvs0))
(let ((nvX (pair-fst pair))
(nvY (pair-snd pair)))
(nvband (nvhdf-halted nvX) (nvhdf-halted nvY)))))
(nvhdf-halt)
(nvhdf-run (lambda (nvm)
(let ((pair (let ((pair nvs0))
(let ((nvX (pair-fst pair))
(nvY (pair-snd pair)))
(let ((pair (nvhdf-ap nvX nvm)))
(let ((nvX_ (pair-fst pair))
(nvxs (pair-snd pair)))
(let ((pair (nvhdf-ap nvY nvm)))
(let ((nvY_ (pair-fst pair))
(nvys (pair-snd pair)))
(let ((nvout (nvbag-append nvxs nvys)))
(make-pair :fst (make-pair :fst nvX_ :snd nvY_) :snd nvout))))))))))
(let ((nvs1 (pair-fst pair))
(nvb (pair-snd pair)))
(make-pair :fst (funcall (funcall nvmk-hdf)
nvs1) :snd nvb)))))))))
(make-pair :fst nvX :snd nvY)))

(defun nvparallel-class-program (nvX nvY)
(lambda (nvi)
(nvhdf-parallel (funcall nvX
nvi) (funcall nvY
nvi))))

(defun nvpi1 (nvt)
(let ((pair nvt))
(let ((nvx (pair-fst pair))
(nvy (pair-snd pair)))
(declare (ignore nvy))
nvx)))

(defun nvmsg-header (nvm)
(nvpi1 nvm))

(defun nvpi2 (nvt)
(let ((pair nvt))
(let ((nvx (pair-fst pair))
(nvy (pair-snd pair)))
(declare (ignore nvx))
nvy)))

(defun nvmsg-body (nvmsg)
(nvpi2 nvmsg))

(defun nvcond-msg-body (nvhdr nvmsg)
(if (inl-p (nvname_eq (nvmsg-header nvmsg) nvhdr))
(nvsingle-bag (nvmsg-body nvmsg))
(make-axiom)))

(defun nvbase-class-program (nvhdr)
(lambda (nvi)
(declare (ignore nvi))
(funcall (fix (lambda (nvmk-hdf)
(lambda (nvs0)
(if (inl-p (nvbfalse))
(nvhdf-halt)
(nvhdf-run (lambda (nvm)
(let ((pair (make-pair :fst nvs0 :snd (nvcond-msg-body nvhdr nvm))))
(let ((nvs1 (pair-fst pair))
(nvb (pair-snd pair)))
(make-pair :fst (funcall (funcall nvmk-hdf)
nvs1) :snd nvb)))))))))
(make-axiom))))

(defun nvaneris_pax_v1_react_base-program (nvCmd nvdecision nvpropose nvzs)
(declare (ignore nvCmd))
(declare (ignore nvdecision))
(declare (ignore nvpropose))
(declare (ignore nvzs))
(nvbase-class-program (make-pair :fst "aneris_pax_v1" :snd (make-pair :fst "react" :snd (make-axiom)))))

(defun nvmap (nvf nvas)
(funcall (fix (lambda (nvlist_ind)
(lambda (nvL)
(if (pair-p nvL)
(let ((pair nvL))
(let ((nvh (pair-fst pair))
(nvt (pair-snd pair)))
(make-pair :fst (funcall nvf
nvh) :snd (funcall (funcall nvlist_ind)
nvt))))
(if (axiom-p nvL)
(make-axiom)
(error "bottom"))))))
nvas))

(defun nvbag-map (nvf nvbs)
(nvmap nvf nvbs))

(defun nvhdf-compose1 (nvf nvX)
(funcall (fix (lambda (nvmk-hdf)
(lambda (nvs0)
(if (inl-p (nvhdf-halted nvs0))
(nvhdf-halt)
(nvhdf-run (lambda (nvm)
(let ((pair (let ((pair (nvhdf-ap nvs0 nvm)))
(let ((nvX_ (pair-fst pair))
(nvbs (pair-snd pair)))
(let ((nvout (nvbag-map nvf nvbs)))
(make-pair :fst nvX_ :snd nvout))))))
(let ((nvs1 (pair-fst pair))
(nvb (pair-snd pair)))
(make-pair :fst (funcall (funcall nvmk-hdf)
nvs1) :snd nvb)))))))))
nvX))

(defun nveclass1-program (nvf nvpr)
(lambda (nvi)
(nvhdf-compose1 (funcall nvf
nvi) (funcall nvpr
nvi))))

(defun nvaneris_pax_v1_pong_base-program (nvCmd nvdecision nvpropose nvzs)
(declare (ignore nvCmd))
(declare (ignore nvdecision))
(declare (ignore nvpropose))
(declare (ignore nvzs))
(nvbase-class-program (make-pair :fst "aneris_pax_v1" :snd (make-pair :fst "pong" :snd (make-axiom)))))

(defun nvreduce (nvf nvk nvas)
(funcall (fix (lambda (nvlist_ind)
(lambda (nvL)
(if (pair-p nvL)
(let ((pair nvL))
(let ((nvh (pair-fst pair))
(nvt (pair-snd pair)))
(funcall (funcall nvf
nvh)
(funcall (funcall nvlist_ind)
nvt))))
(if (axiom-p nvL)
nvk
(error "bottom"))))))
nvas))

(defun nvconcat (nvll)
(nvreduce (lambda (nvl)
(lambda (nvl_)
(nvappend nvl nvl_))) (make-axiom) nvll))

(defun nvbag-union (nvbbs)
(nvconcat nvbbs))

(defun nvbag-null (nvbs)
(nvnull nvbs))

(defun nvhdf-memory (nvX nvbs)
(funcall (fix (lambda (nvmk-hdf)
(lambda (nvs0)
(if (inl-p (nvbfalse))
(nvhdf-halt)
(nvhdf-run (lambda (nvm)
(let ((pair (let ((pair nvs0))
(let ((nvX (pair-fst pair))
(nvs (pair-snd pair)))
(let ((pair (nvhdf-ap nvX nvm)))
(let ((nvX_ (pair-fst pair))
(nvfs (pair-snd pair)))
(let ((nvb (nvbag-union (nvbag-map (lambda (nvx)
(nvbag-map nvx nvs)) nvfs))))
(let ((nvs_ (if (inl-p (nvbag-null nvb))
nvs
nvb)))
(make-pair :fst (make-pair :fst nvX_ :snd nvs_) :snd nvs)))))))))
(let ((nvs1 (pair-fst pair))
(nvb (pair-snd pair)))
(make-pair :fst (funcall (funcall nvmk-hdf)
nvs1) :snd nvb)))))))))
(make-pair :fst nvX :snd nvbs)))

(defun nvloop-class-memory-program (nvpr nvinit)
(lambda (nvi)
(nvhdf-memory (funcall nvpr
nvi) (funcall nvinit
nvi))))

(defun nvmemory-class2-program (nvinit nvtr1 nvpr1 nvtr2 nvpr2)
(nvloop-class-memory-program (nvparallel-class-program (nveclass1-program nvtr1 nvpr1) (nveclass1-program nvtr2 nvpr2)) (lambda (nvloc)
(nvsingle-bag (funcall nvinit
nvloc)))))

(defun nvaneris_pax_v1_MonitorState-program (nvCmd nvdecision nvpropose nvzs)
(lambda (nvloc)
(declare (ignore nvloc))
(nvmemory-class2-program (lambda (nvz)
(declare (ignore nvz))
(nvbfalse)) (lambda (nvz)
(declare (ignore nvz))
(lambda (nvz)
(declare (ignore nvz))
(lambda (nvz)
(declare (ignore nvz))
(nvbtrue)))) (nvaneris_pax_v1_pong_base-program nvCmd nvdecision nvpropose nvzs) (lambda (nvz)
(declare (ignore nvz))
(lambda (nvz)
(declare (ignore nvz))
(lambda (nvz)
(declare (ignore nvz))
(nvbfalse)))) (nvaneris_pax_v1_react_base-program nvCmd nvdecision nvpropose nvzs))))

(defun nvbor (nvp nvq)
(if (inl-p nvp)
(nvbtrue)
nvq))

(defun nvhdf-compose2 (nvX nvY)
(funcall (fix (lambda (nvmk-hdf)
(lambda (nvs0)
(if (inl-p (let ((pair nvs0))
(let ((nvX (pair-fst pair))
(nvY (pair-snd pair)))
(nvbor (nvhdf-halted nvX) (nvhdf-halted nvY)))))
(nvhdf-halt)
(nvhdf-run (lambda (nvm)
(let ((pair (let ((pair nvs0))
(let ((nvX (pair-fst pair))
(nvY (pair-snd pair)))
(let ((pair (nvhdf-ap nvX nvm)))
(let ((nvX_ (pair-fst pair))
(nvfs (pair-snd pair)))
(let ((pair (nvhdf-ap nvY nvm)))
(let ((nvY_ (pair-fst pair))
(nvbs (pair-snd pair)))
(let ((nvout (nvbag-union (nvbag-map (lambda (nvx)
(nvbag-union (nvbag-map (lambda (nvx_)
(funcall nvx
nvx_)) nvbs))) nvfs))))
(make-pair :fst (make-pair :fst nvX_ :snd nvY_) :snd nvout))))))))))
(let ((nvs1 (pair-fst pair))
(nvb (pair-snd pair)))
(make-pair :fst (funcall (funcall nvmk-hdf)
nvs1) :snd nvb)))))))))
(make-pair :fst nvX :snd nvY)))

(defun nveclass2-program (nvXpr nvYpr)
(lambda (nvi)
(nvhdf-compose2 (funcall nvXpr
nvi) (funcall nvYpr
nvi))))

(defun nvaneris_pax_v1_start_send (nvCmd nvdecision nvpropose nvzs)
(declare (ignore nvCmd))
(declare (ignore nvdecision))
(declare (ignore nvpropose))
(declare (ignore nvzs))
(lambda (nvl)
(lambda (nvz)
(nvmk-msg-interface nvl (nvmake-Msg (make-pair :fst "aneris_pax_v1" :snd (make-pair :fst "start" :snd (make-axiom))) nvz)))))

(defun nvaneris_pax_v1_MonitorReact-program (nvCmd nvdecision nvpropose nvzs)
(lambda (nvloc)
(funcall (lambda (nvx)
(nveclass2-program (nveclass1-program nvx (nvaneris_pax_v1_react_base-program nvCmd nvdecision nvpropose nvzs)) (funcall (nvaneris_pax_v1_MonitorState-program nvCmd nvdecision nvpropose nvzs)
nvloc)))
(lambda (nvldr)
(lambda (nvz)
(declare (ignore nvz))
(lambda (nvreceived_pong)
(if (inl-p nvreceived_pong)
(nvbag-append (nvsingle-bag (funcall (funcall (nvaneris_pax_v1_ping_send nvCmd nvdecision nvpropose nvzs)
nvloc)
nvldr)) (nvsingle-bag (funcall (funcall (funcall (nvaneris_pax_v1_react__send nvCmd nvdecision nvpropose nvzs)
10)
nvldr)
(make-axiom))))
(nvsingle-bag (funcall (funcall (nvaneris_pax_v1_start_send nvCmd nvdecision nvpropose nvzs)
nvldr)
(make-axiom))))))))))

(defun nvaneris_pax_v1_MonitorHigherLeader-program (nvCmd nvdecision nvpropose nvzs)
(lambda (nvloc)
(nvparallel-class-program (nvparallel-class-program (nvreturn-loc-bag-class-program (lambda (nvldr)
(nvsingle-bag (funcall (funcall (nvaneris_pax_v1_ping_send nvCmd nvdecision nvpropose nvzs)
nvloc)
nvldr)))) (nvreturn-loc-bag-class-program (lambda (nvldr)
(nvsingle-bag (funcall (funcall (funcall (nvaneris_pax_v1_react__send nvCmd nvdecision nvpropose nvzs)
10)
nvldr)
(make-axiom)))))) (funcall (nvaneris_pax_v1_MonitorReact-program nvCmd nvdecision nvpropose nvzs)
nvloc))))

(defun nvaneris_pax_v1_p1a_broadcast (nvCmd nvdecision nvpropose nvzs)
(declare (ignore nvCmd))
(declare (ignore nvdecision))
(declare (ignore nvpropose))
(declare (ignore nvzs))
(lambda (nvlocs)
(lambda (nvz)
(nvbag-map (lambda (nvl)
(nvmk-msg-interface nvl (nvmake-Msg (make-pair :fst "aneris_pax_v1" :snd (make-pair :fst "p1a" :snd (make-axiom))) nvz))) nvlocs))))

(defun nvaneris_pax_v1_ScoutNotify-program (nvCmd nvaccpts nvdecision nvpropose nvzs)
(lambda (nvbn)
(nvreturn-loc-bag-class-program (lambda (nvldr)
(funcall (funcall (nvaneris_pax_v1_p1a_broadcast nvCmd nvdecision nvpropose nvzs)
nvaccpts)
(make-pair :fst nvldr :snd nvbn))))))

(defun nveq_int (nvi nvj)
(if (= nvi nvj)
(nvbtrue)
(nvbfalse)))

(defun nvint-deq ()
(lambda (nva)
(lambda (nvb)
(nveq_int nva nvb))))

(defun nvproddeq (nva nvb)
(lambda (nvp)
(lambda (nvq)
(nvband (funcall (funcall nva
(nvpi1 nvp))
(nvpi1 nvq)) (funcall (funcall nvb
(nvpi2 nvp))
(nvpi2 nvq))))))

(defun nvproduct-deq (nvAA nvBB nva nvb)
(declare (ignore nvAA))
(declare (ignore nvBB))
(nvproddeq nva nvb))

(defun nvunit-deq ()
(lambda (nva)
(declare (ignore nva))
(lambda (nvb)
(declare (ignore nvb))
(nvbtrue))))

(defun nvsumdeq (nva nvb)
(lambda (nvp)
(lambda (nvq)
(let ((dec nvp))
(if (inl-p dec)
(let ((nvpa (inl-val dec)))
(let ((dec nvq))
(if (inl-p dec)
(let ((nvqa (inl-val dec)))
(funcall (funcall nva
nvpa)
nvqa))
(if (inr-p dec)
(let ((nvqb (inr-val dec)))
(declare (ignore nvqb))
(nvbfalse))
(error "decide:an_injection_should_be_a_list_with_header_inl_or_inr")))))
(if (inr-p dec)
(let ((nvpb (inr-val dec)))
(let ((dec nvq))
(if (inl-p dec)
(let ((nvqa (inl-val dec)))
(declare (ignore nvqa))
(nvbfalse))
(if (inr-p dec)
(let ((nvqb (inr-val dec)))
(funcall (funcall nvb
nvpb)
nvqb))
(error "decide:an_injection_should_be_a_list_with_header_inl_or_inr")))))
(error "decide:an_injection_should_be_a_list_with_header_inl_or_inr")))))))

(defun nvunion-deq (nvAA nvBB nva nvb)
(declare (ignore nvAA))
(declare (ignore nvBB))
(nvsumdeq nva nvb))

(defun nvaneris_pax_v1_eq_bnums ()
(lambda (nvbn1)
(lambda (nvbn2)
(funcall (funcall (nvunion-deq "PRODUCT" "EQUAL" (nvproduct-deq "INT" (nvId) (nvint-deq) (lambda (nva)
(lambda (nvb)
(if (string= nva nvb)
(make-inl :val (make-axiom))
(make-inr :val (make-axiom)))))) (nvunit-deq))
nvbn1)
nvbn2))))

(defun nvlength (nvas)
(funcall (fix (lambda (nvlength)
(lambda (nvas)
(funcall (fix (lambda (nvlist_ind)
(declare (ignore nvlist_ind))
(lambda (nvL)
(if (pair-p nvL)
(let ((pair nvL))
(let ((nvh (pair-fst pair))
(nvt (pair-snd pair)))
(declare (ignore nvh))
(+ (funcall (funcall nvlength)
nvt) 1)))
(if (axiom-p nvL)
0
(error "bottom"))))))
nvas))))
nvas))

(defun nvbag-size (nvbs)
(nvlength nvbs))

(defun nvaneris_pax_v1_threshold (nvaccpts)
(/ (+ (nvbag-size nvaccpts) 1) 2))

(defun nvaneris_pax_v1_adopted_send (nvCmd nvdecision nvpropose nvzs)
(declare (ignore nvCmd))
(declare (ignore nvdecision))
(declare (ignore nvpropose))
(declare (ignore nvzs))
(lambda (nvl)
(lambda (nvz)
(nvmk-msg-interface nvl (nvmake-Msg (make-pair :fst "aneris_pax_v1" :snd (make-pair :fst "adopted" :snd (make-axiom))) nvz)))))

(defun nvaneris_pax_v1_preempted_send (nvCmd nvdecision nvpropose nvzs)
(declare (ignore nvCmd))
(declare (ignore nvdecision))
(declare (ignore nvpropose))
(declare (ignore nvzs))
(lambda (nvl)
(lambda (nvz)
(nvmk-msg-interface nvl (nvmake-Msg (make-pair :fst "aneris_pax_v1" :snd (make-pair :fst "preempted" :snd (make-axiom))) nvz)))))

(defun nvaneris_pax_v1_scout_output (nvCmd nvaccpts nvdecision nvpropose nvzs)
(lambda (nvbnum)
(lambda (nvldr)
(lambda (nvzl)
(let ((pair nvzl))
(let ((nvw (pair-fst pair))
(nvzz1 (pair-snd pair)))
(declare (ignore nvw))
(let ((pair nvzz1))
(let ((nvx (pair-fst pair))
(nvzz2 (pair-snd pair)))
(let ((pair nvzz2))
(let ((nvy (pair-fst pair))
(nvz (pair-snd pair)))
(declare (ignore nvz))
(lambda (nvz_)
(let ((pair nvz_))
(let ((nvwaitfor (pair-fst pair))
(nvpvalues (pair-snd pair)))
(if (inl-p (funcall (funcall (nvaneris_pax_v1_eq_bnums)
nvbnum)
nvx))
(if (inl-p (funcall (funcall (nvaneris_pax_v1_eq_bnums)
nvbnum)
nvy))
(if (inl-p (nvlt_int (nvbag-size nvwaitfor) (nvaneris_pax_v1_threshold nvaccpts)))
(nvsingle-bag (funcall (funcall (nvaneris_pax_v1_adopted_send nvCmd nvdecision nvpropose nvzs)
nvldr)
(make-pair :fst nvbnum :snd nvpvalues)))
(make-axiom))
(nvsingle-bag (funcall (funcall (nvaneris_pax_v1_preempted_send nvCmd nvdecision nvpropose nvzs)
nvldr)
nvy)))
(make-axiom)))))))))))))))

(defun nvaneris_pax_v1_p1b_base-program (nvCmd nvdecision nvpropose nvzs)
(declare (ignore nvCmd))
(declare (ignore nvdecision))
(declare (ignore nvpropose))
(declare (ignore nvzs))
(nvbase-class-program (make-pair :fst "aneris_pax_v1" :snd (make-pair :fst "p1b" :snd (make-axiom)))))

(defun nvaneris_pax_v1_init_pvalues (nvCmd)
(declare (ignore nvCmd))
(make-axiom))

(defun nvaneris_pax_v1_init_scout (nvCmd nvaccpts)
(make-pair :fst nvaccpts :snd (nvaneris_pax_v1_init_pvalues nvCmd)))

(defun nvaneris_pax_v1_prp2slt (nvCmd)
(declare (ignore nvCmd))
(lambda (nvproposal)
(nvpi1 nvproposal)))

(defun nvaneris_pax_v1_pv2prp (nvCmd)
(declare (ignore nvCmd))
(lambda (nvpvalue)
(nvpi2 nvpvalue)))

(defun nvint-minus-comparison (nvf)
(lambda (nvx)
(lambda (nvy)
(- (funcall nvf
nvx) (funcall nvf
nvy)))))

(defun nvaneris_pax_v1_leq_bnum_ (nvldrs_uid)
(lambda (nvza)
(let ((pair nvza))
(let ((nvi1 (pair-fst pair))
(nvl1 (pair-snd pair)))
(lambda (nvz)
(let ((pair nvz))
(let ((nvi2 (pair-fst pair))
(nvl2 (pair-snd pair)))
(nvbor (nvlt_int nvi1 nvi2) (nvband (nveq_int nvi1 nvi2) (nvle_int (funcall nvldrs_uid
nvl1) (funcall nvldrs_uid
nvl2)))))))))))

(defun nvaneris_pax_v1_leq_bnum (nvldrs_uid)
(lambda (nvbn1)
(lambda (nvbn2)
(let ((dec nvbn1))
(if (inl-p dec)
(let ((nvx1 (inl-val dec)))
(let ((dec nvbn2))
(if (inl-p dec)
(let ((nvx2 (inl-val dec)))
(funcall (funcall (nvaneris_pax_v1_leq_bnum_ nvldrs_uid)
nvx1)
nvx2))
(if (inr-p dec)
(let ((nvz (inr-val dec)))
(declare (ignore nvz))
(nvbfalse))
(error "decide:an_injection_should_be_a_list_with_header_inl_or_inr")))))
(if (inr-p dec)
(let ((nvz (inr-val dec)))
(declare (ignore nvz))
(nvbtrue))
(error "decide:an_injection_should_be_a_list_with_header_inl_or_inr")))))))

(defun nvaneris_pax_v1_pv2bn (nvCmd)
(declare (ignore nvCmd))
(lambda (nvpvalue)
(nvpi1 nvpvalue)))

(defun nvinsert-combine (nvcmp nvf nvx nvl)
(funcall (fix (lambda (nvlist_ind)
(lambda (nvL)
(if (pair-p nvL)
(let ((pair nvL))
(let ((nvh (pair-fst pair))
(nvt (pair-snd pair)))
(let ((nvtst (funcall (funcall nvcmp
nvx)
nvh)))
(if (inl-p (nveq_int nvtst 0))
(make-pair :fst (funcall (funcall nvf
nvx)
nvh) :snd nvt)
(if (inl-p (nvlt_int 0 nvtst))
(make-pair :fst nvx :snd (make-pair :fst nvh :snd nvt))
(make-pair :fst nvh :snd (funcall (funcall nvlist_ind)
nvt)))))))
(if (axiom-p nvL)
(make-pair :fst nvx :snd (make-axiom))
(error "bottom"))))))
nvl))

(defun nvaneris_pax_v1_add_pvalue (nvCmd nvldrs_uid)
(lambda (nvpvalues)
(lambda (nvpvalue)
(nvinsert-combine (nvint-minus-comparison (lambda (nvpv)
(funcall (nvaneris_pax_v1_prp2slt nvCmd)
(funcall (nvaneris_pax_v1_pv2prp nvCmd)
nvpv)))) (lambda (nvpv1)
(lambda (nvpv2)
(if (inl-p (funcall (funcall (nvaneris_pax_v1_leq_bnum nvldrs_uid)
(funcall (nvaneris_pax_v1_pv2bn nvCmd)
nvpv1))
(funcall (nvaneris_pax_v1_pv2bn nvCmd)
nvpv2)))
nvpv2
nvpv1))) nvpvalue nvpvalues))))

(defun nvaneris_pax_v1_add_new_pvalues (nvCmd nvldrs_uid)
(lambda (nvpvals1)
(lambda (nvpvals2)
(nvreduce (lambda (nvpv)
(lambda (nvr)
(funcall (funcall (nvaneris_pax_v1_add_pvalue nvCmd nvldrs_uid)
nvr)
nvpv))) nvpvals2 nvpvals1))))

(defun nvfilter (nvP nvl)
(nvreduce (lambda (nva)
(lambda (nvv)
(if (inl-p (funcall nvP
nva))
(make-pair :fst nva :snd nvv)
nvv))) (make-axiom) nvl))

(defun nvbag-remove (nveq nvbs nvx)
(nvfilter (lambda (nvx_)
(nvbnot (funcall (funcall nveq
nvx)
nvx_))) nvbs))

(defun nvaneris_pax_v1_on_p1b (nvCmd nvldrs_uid)
(lambda (nvbnum)
(lambda (nvloc)
(declare (ignore nvloc))
(lambda (nvzj)
(let ((pair nvzj))
(let ((nvw (pair-fst pair))
(nvzz1 (pair-snd pair)))
(let ((pair nvzz1))
(let ((nvx (pair-fst pair))
(nvzz2 (pair-snd pair)))
(let ((pair nvzz2))
(let ((nvy (pair-fst pair))
(nvz (pair-snd pair)))
(lambda (nvz_)
(let ((pair nvz_))
(let ((nvwaitfor (pair-fst pair))
(nvpvalues (pair-snd pair)))
(if (inl-p (nvband (funcall (funcall (nvaneris_pax_v1_eq_bnums)
nvbnum)
nvx) (funcall (funcall (nvaneris_pax_v1_eq_bnums)
nvbnum)
nvy)))
(funcall (lambda (nvx)
(funcall (lambda (nvx_)
(make-pair :fst nvx :snd nvx_))
(funcall (funcall (nvaneris_pax_v1_add_new_pvalues nvCmd nvldrs_uid)
nvpvalues)
nvz)))
(nvbag-remove (lambda (nva)
(lambda (nvb)
(if (string= nva nvb)
(make-inl :val (make-axiom))
(make-inr :val (make-axiom))))) nvwaitfor nvw))
(make-pair :fst nvwaitfor :snd nvpvalues)))))))))))))))

(defun nvhdf-state (nvX nvbs)
(funcall (fix (lambda (nvmk-hdf)
(lambda (nvs0)
(if (inl-p (nvbfalse))
(nvhdf-halt)
(nvhdf-run (lambda (nvm)
(let ((pair (let ((pair nvs0))
(let ((nvX (pair-fst pair))
(nvs (pair-snd pair)))
(let ((pair (nvhdf-ap nvX nvm)))
(let ((nvX_ (pair-fst pair))
(nvfs (pair-snd pair)))
(let ((nvb (nvbag-union (nvbag-map (lambda (nvx)
(nvbag-map nvx nvs)) nvfs))))
(let ((nvs_ (if (inl-p (nvbag-null nvb))
nvs
nvb)))
(make-pair :fst (make-pair :fst nvX_ :snd nvs_) :snd nvs_)))))))))
(let ((nvs1 (pair-fst pair))
(nvb (pair-snd pair)))
(make-pair :fst (funcall (funcall nvmk-hdf)
nvs1) :snd nvb)))))))))
(make-pair :fst nvX :snd nvbs)))

(defun nvloop-class-state-program (nvpr nvinit)
(lambda (nvi)
(nvhdf-state (funcall nvpr
nvi) (funcall nvinit
nvi))))

(defun nvstate-class1-program (nvinit nvtr nvpr)
(nvloop-class-state-program (nveclass1-program nvtr nvpr) (lambda (nvloc)
(nvsingle-bag (funcall nvinit
nvloc)))))

(defun nvaneris_pax_v1_ScoutState-program (nvCmd nvaccpts nvdecision nvldrs_uid nvpropose nvzs)
(lambda (nvbn)
(nvstate-class1-program (lambda (nvloc)
(declare (ignore nvloc))
(nvaneris_pax_v1_init_scout nvCmd nvaccpts)) (funcall (nvaneris_pax_v1_on_p1b nvCmd nvldrs_uid)
nvbn) (nvaneris_pax_v1_p1b_base-program nvCmd nvdecision nvpropose nvzs))))

(defun nvhdf-once (nvX)
(funcall (fix (lambda (nvmk-hdf)
(lambda (nvs0)
(if (inl-p (nvhdf-halted nvs0))
(nvhdf-halt)
(nvhdf-run (lambda (nvm)
(let ((pair (let ((pair (nvhdf-ap nvs0 nvm)))
(let ((nvX_ (pair-fst pair))
(nvb (pair-snd pair)))
(make-pair :fst (if (inl-p (nvbag-null nvb))
nvX_
(nvhdf-halt)) :snd nvb)))))
(let ((nvs1 (pair-fst pair))
(nvb (pair-snd pair)))
(make-pair :fst (funcall (funcall nvmk-hdf)
nvs1) :snd nvb)))))))))
nvX))

(defun nvonce-class-program (nvpr)
(lambda (nvi)
(nvhdf-once (funcall nvpr
nvi))))

(defun nvaneris_pax_v1_ScoutOutput-program (nvCmd nvaccpts nvdecision nvldrs_uid nvpropose nvzs)
(lambda (nvbn)
(nvonce-class-program (nveclass2-program (nveclass1-program (funcall (nvaneris_pax_v1_scout_output nvCmd nvaccpts nvdecision nvpropose nvzs)
nvbn) (nvaneris_pax_v1_p1b_base-program nvCmd nvdecision nvpropose nvzs)) (funcall (nvaneris_pax_v1_ScoutState-program nvCmd nvaccpts nvdecision nvldrs_uid nvpropose nvzs)
nvbn)))))

(defun nvaneris_pax_v1_Scout-program (nvCmd nvaccpts nvdecision nvldrs_uid nvpropose nvzs)
(lambda (nvbn)
(nvparallel-class-program (funcall (nvaneris_pax_v1_ScoutNotify-program nvCmd nvaccpts nvdecision nvpropose nvzs)
nvbn) (funcall (nvaneris_pax_v1_ScoutOutput-program nvCmd nvaccpts nvdecision nvldrs_uid nvpropose nvzs)
nvbn))))

(defun nvaneris_pax_v1_mk_bnum ()
(lambda (nvn)
(lambda (nvloc)
(make-inl :val (make-pair :fst nvn :snd nvloc)))))

(defun nvon-loc-class-program (nvpr)
(lambda (nvi)
(funcall (funcall nvpr
nvi)
nvi)))

(defun nvaneris_pax_v1_SpawnFirstScout-program (nvCmd nvaccpts nvdecision nvldrs_uid nvpropose nvzs)
(nvon-loc-class-program (lambda (nvldr)
(funcall (nvaneris_pax_v1_Scout-program nvCmd nvaccpts nvdecision nvldrs_uid nvpropose nvzs)
(funcall (funcall (nvaneris_pax_v1_mk_bnum)
0)
nvldr)))))

(defun nvaneris_pax_v1_LeaderStart-program (nvCmd nvaccpts nvdecision nvldrs_uid nvpropose nvzs)
(lambda (nvd)
(let ((dec nvd))
(if (inl-p dec)
(let ((nvl (inl-val dec)))
(funcall (nvaneris_pax_v1_MonitorHigherLeader-program nvCmd nvdecision nvpropose nvzs)
nvl))
(if (inr-p dec)
(let ((nvz (inr-val dec)))
(declare (ignore nvz))
(nvaneris_pax_v1_SpawnFirstScout-program nvCmd nvaccpts nvdecision nvldrs_uid nvpropose nvzs))
(error "decide:an_injection_should_be_a_list_with_header_inl_or_inr"))))))

(defun nvbind-nxt (nvY nvp nva)
(let ((pair nvp))
(let ((nvX (pair-fst pair))
(nvys (pair-snd pair)))
(let ((pair (nvhdf-ap nvX nva)))
(let ((nvX_ (pair-fst pair))
(nvb (pair-snd pair)))
(let ((nvybs (nvbag-map (lambda (nvP)
(nvhdf-ap nvP nva)) (nvbag-append nvys (nvbag-map nvY nvb)))))
(let ((nvys_ (nvfilter (lambda (nvx)
(nvbnot (nvhdf-halted nvx))) (nvbag-map (lambda (nvyb)
(nvpi1 nvyb)) nvybs))))
(let ((nvout (nvbag-union (nvbag-map (lambda (nvx)
(nvpi2 nvx)) nvybs))))
(make-pair :fst (make-pair :fst nvX_ :snd nvys_) :snd nvout)))))))))

(defun nvhdf-bind (nvX nvY)
(funcall (fix (lambda (nvmk-hdf)
(lambda (nvs0)
(if (inl-p (let ((pair nvs0))
(let ((nvX (pair-fst pair))
(nvys (pair-snd pair)))
(nvband (nvhdf-halted nvX) (nvbag-null nvys)))))
(nvhdf-halt)
(nvhdf-run (lambda (nvm)
(let ((pair (nvbind-nxt nvY nvs0 nvm)))
(let ((nvs1 (pair-fst pair))
(nvb (pair-snd pair)))
(make-pair :fst (funcall (funcall nvmk-hdf)
nvs1) :snd nvb)))))))))
(make-pair :fst nvX :snd (make-axiom))))

(defun nvbind-class-program (nvxpr nvypr)
(lambda (nvi)
(nvhdf-bind (funcall nvxpr
nvi) (lambda (nvx)
(funcall (funcall nvypr
nvx)
nvi)))))

(defun nvaneris_pax_v1_start_base-program (nvCmd nvdecision nvpropose nvzs)
(declare (ignore nvCmd))
(declare (ignore nvdecision))
(declare (ignore nvpropose))
(declare (ignore nvzs))
(nvbase-class-program (make-pair :fst "aneris_pax_v1" :snd (make-pair :fst "start" :snd (make-axiom)))))

(defun nvaneris_pax_v1_dest_prp (nvCmd)
(declare (ignore nvCmd))
(lambda (nvproposal)
nvproposal))

(defun nvaneris_pax_v1_in_proposals (nvCmd)
(lambda (nvslt)
(lambda (nvproposals)
(nvreduce (lambda (nvprp)
(lambda (nvr)
(let ((pair (funcall (nvaneris_pax_v1_dest_prp nvCmd)
nvprp)))
(let ((nvslt_ (pair-fst pair))
(nvcmd (pair-snd pair)))
(declare (ignore nvcmd))
(if (inl-p (nvlt_int nvslt_ nvslt))
(nvbfalse)
(if (inl-p (nveq_int nvslt nvslt_))
(nvbtrue)
nvr)))))) (nvbfalse) nvproposals))))

(defun nvaneris_pax_v1_is_in_missing ()
(lambda (nvslt)
(lambda (nvmissing)
(nvreduce (lambda (nvh)
(lambda (nvr)
(if (inl-p (nvlt_int nvslt nvh))
(nvbfalse)
(if (inl-p (nveq_int nvslt nvh))
(nvbtrue)
nvr)))) (nvbfalse) nvmissing))))

(defun nvaneris_pax_v1_is_decided ()
(lambda (nvslt)
(lambda (nvz)
(let ((pair nvz))
(let ((nvmax (pair-fst pair))
(nvmissing (pair-snd pair)))
(nvband (nvle_int nvslt nvmax) (nvbnot (funcall (funcall (nvaneris_pax_v1_is_in_missing)
nvslt)
nvmissing))))))))

(defun nvaneris_pax_v1_mk_pv (nvCmd)
(declare (ignore nvCmd))
(lambda (nvbn)
(lambda (nvprp)
(make-pair :fst nvbn :snd nvprp))))

(defun nvaneris_pax_v1_leader_propose (nvCmd)
(lambda (nvloc)
(declare (ignore nvloc))
(lambda (nvproposal)
(lambda (nvz)
(let ((pair nvz))
(let ((nvw (pair-fst pair))
(nvzz1 (pair-snd pair)))
(let ((pair nvzz1))
(let ((nvx (pair-fst pair))
(nvzz2 (pair-snd pair)))
(let ((pair nvzz2))
(let ((nvy (pair-fst pair))
(nvz_ (pair-snd pair)))
(funcall (lambda (nvx_)
(if (inl-p (nvband nvx (nvband (nvbnot (funcall (funcall (nvaneris_pax_v1_in_proposals nvCmd)
nvx_)
nvy)) (nvbnot (funcall (funcall (nvaneris_pax_v1_is_decided)
nvx_)
nvz_)))))
(nvsingle-bag (funcall (funcall (nvaneris_pax_v1_mk_pv nvCmd)
nvw)
nvproposal))
(make-axiom)))
(funcall (nvaneris_pax_v1_prp2slt nvCmd)
nvproposal))))))))))))

(defun nvaneris_pax_v1_propose_base-program (nvCmd nvdecision nvpropose nvzs)
(declare (ignore nvCmd))
(declare (ignore nvdecision))
(declare (ignore nvzs))
(nvbase-class-program nvpropose))

(defun nvaneris_pax_v1_init_ballot_num ()
(lambda (nvloc)
(funcall (funcall (nvaneris_pax_v1_mk_bnum)
0)
nvloc)))

(defun nvaneris_pax_v1_init_active ()
(nvbfalse))

(defun nvaneris_pax_v1_init_proposals (nvCmd)
(declare (ignore nvCmd))
(make-axiom))

(defun nvaneris_pax_v1_init_decided ()
(make-pair :fst 0 :snd (make-axiom)))

(defun nvaneris_pax_v1_init_leader (nvCmd)
(lambda (nvloc)
(make-pair :fst (funcall (nvaneris_pax_v1_init_ballot_num)
nvloc) :snd (make-pair :fst (nvaneris_pax_v1_init_active) :snd (make-pair :fst (nvaneris_pax_v1_init_proposals nvCmd) :snd (nvaneris_pax_v1_init_decided))))))

(defun nvaneris_pax_v1_mk_prp (nvCmd)
(declare (ignore nvCmd))
(lambda (nvslt)
(lambda (nvcmd)
(make-pair :fst nvslt :snd nvcmd))))

(defun nvaneris_pax_v1_add_proposal_if_not_in (nvCCmd)
  (lambda (nvproposals)
    (lambda (nvslt)
      (lambda (nvcmd)
	(nvinsert-combine
	 (nvint-minus-comparison (nvaneris_pax_v1_prp2slt nvCCmd))
	 (lambda (nvprp1)
	   (declare (ignore nvprp1))
	   (lambda (nvprp2)
	     nvprp2))
	 (funcall (funcall (nvaneris_pax_v1_mk_prp nvCCmd)
			   nvslt)
		  nvcmd)
	 nvproposals)
	)
      )
    )
  )

(defun nvaneris_pax_v1_on_propose (nvCmd)
(lambda (nvloc)
(declare (ignore nvloc))
(lambda (nvproposal)
(lambda (nvz)
(let ((pair nvz))
(let ((nvw (pair-fst pair))
(nvzz1 (pair-snd pair)))
(let ((pair nvzz1))
(let ((nvx (pair-fst pair))
(nvzz2 (pair-snd pair)))
(let ((pair nvzz2))
(let ((nvy (pair-fst pair))
(nvz_ (pair-snd pair)))
(let ((pair (funcall (nvaneris_pax_v1_dest_prp nvCmd)
nvproposal)))
(let ((nvslt (pair-fst pair))
(nvcmd (pair-snd pair)))
(funcall (lambda (nvx_)
(make-pair :fst nvw :snd (make-pair :fst nvx :snd (make-pair :fst nvx_ :snd nvz_))))
(if (inl-p (funcall (funcall (nvaneris_pax_v1_is_decided)
nvslt)
nvz_))
nvy
(funcall (funcall (funcall (nvaneris_pax_v1_add_proposal_if_not_in nvCmd)
nvy)
nvslt)
nvcmd)))))))))))))))

(defun nvaneris_pax_v1_dest_pv (nvCmd)
(lambda (nvpvalue)
(let ((pair nvpvalue))
(let ((nvbn (pair-fst pair))
(nvprp (pair-snd pair)))
(make-pair :fst nvbn :snd (funcall (nvaneris_pax_v1_dest_prp nvCmd)
nvprp))))))

(defun nvaneris_pax_v1_add_proposal (nvCCmd)
(lambda (nvproposals)
(lambda (nvslt)
(lambda (nvcmd)
(nvinsert-combine (nvint-minus-comparison (nvaneris_pax_v1_prp2slt nvCCmd)) (lambda (nvprp1)
(lambda (nvprp2)
(declare (ignore nvprp2))
nvprp1)) (funcall (funcall (nvaneris_pax_v1_mk_prp nvCCmd)
nvslt)
nvcmd) nvproposals)))))

(defun nvaneris_pax_v1_update_proposals (nvCmd)
(lambda (nvproposals)
(lambda (nvdecided)
(lambda (nvpvals)
(funcall (funcall (fix (lambda (nvlist_accum)
(lambda (nvy)
(lambda (nvL)
(if (pair-p nvL)
(let ((pair nvL))
(let ((nvh (pair-fst pair))
(nvt (pair-snd pair)))
(funcall (funcall (funcall nvlist_accum)
(let ((pair (funcall (nvaneris_pax_v1_dest_pv nvCmd)
nvh)))
(let ((nvx (pair-fst pair))
(nvzz (pair-snd pair)))
(declare (ignore nvx))
(let ((pair nvzz))
(let ((nvy_ (pair-fst pair))
(nvz (pair-snd pair)))
(if (inl-p (funcall (funcall (nvaneris_pax_v1_is_decided)
nvy_)
nvdecided))
nvy
(funcall (funcall (funcall (nvaneris_pax_v1_add_proposal nvCmd)
nvy)
nvy_)
nvz)))))))
nvt)))
(if (axiom-p nvL)
nvy
(error "bottom")))))))
nvproposals)
nvpvals)))))

(defun nvaneris_pax_v1_when_adopted (nvCmd)
(lambda (nvloc)
(declare (ignore nvloc))
(lambda (nvzm)
(let ((pair nvzm))
(let ((nvbnum (pair-fst pair))
(nvpvals (pair-snd pair)))
(lambda (nvz)
(let ((pair nvz))
(let ((nvw (pair-fst pair))
(nvzz1 (pair-snd pair)))
(let ((pair nvzz1))
(let ((nvx (pair-fst pair))
(nvzz2 (pair-snd pair)))
(let ((pair nvzz2))
(let ((nvy (pair-fst pair))
(nvz_ (pair-snd pair)))
(if (inl-p (funcall (funcall (nvaneris_pax_v1_eq_bnums)
nvbnum)
nvw))
(funcall (lambda (nvx)
(make-pair :fst nvw :snd (make-pair :fst (nvbtrue) :snd (make-pair :fst nvx :snd nvz_))))
(funcall (funcall (funcall (nvaneris_pax_v1_update_proposals nvCmd)
nvy)
nvz_)
nvpvals))
(make-pair :fst nvw :snd (make-pair :fst nvx :snd (make-pair :fst nvy :snd nvz_))))))))))))))))

(defun nvaneris_pax_v1_adopted_base-program (nvCmd nvdecision nvpropose nvzs)
(declare (ignore nvCmd))
(declare (ignore nvdecision))
(declare (ignore nvpropose))
(declare (ignore nvzs))
(nvbase-class-program (make-pair :fst "aneris_pax_v1" :snd (make-pair :fst "adopted" :snd (make-axiom)))))

(defun nvisl (nvx)
(let ((dec nvx))
(if (inl-p dec)
(let ((nvy (inl-val dec)))
(declare (ignore nvy))
(nvbtrue))
(if (inr-p dec)
(let ((nvz (inr-val dec)))
(declare (ignore nvz))
(nvbfalse))
(error "decide:an_injection_should_be_a_list_with_header_inl_or_inr")))))

(defun nvaneris_pax_v1_is_bnum ()
(lambda (nvbnum)
(nvisl nvbnum)))

(defun nvaneris_pax_v1_lt_bnum_ (nvldrs_uid)
(lambda (nvzb)
(let ((pair nvzb))
(let ((nvi1 (pair-fst pair))
(nvl1 (pair-snd pair)))
(lambda (nvz)
(let ((pair nvz))
(let ((nvi2 (pair-fst pair))
(nvl2 (pair-snd pair)))
(nvbor (nvlt_int nvi1 nvi2) (nvband (nveq_int nvi1 nvi2) (nvlt_int (funcall nvldrs_uid
nvl1) (funcall nvldrs_uid
nvl2)))))))))))

(defun nvaneris_pax_v1_lt_bnum (nvldrs_uid)
(lambda (nvbn1)
(lambda (nvbn2)
(let ((dec nvbn1))
(if (inl-p dec)
(let ((nvx1 (inl-val dec)))
(let ((dec nvbn2))
(if (inl-p dec)
(let ((nvx2 (inl-val dec)))
(funcall (funcall (nvaneris_pax_v1_lt_bnum_ nvldrs_uid)
nvx1)
nvx2))
(if (inr-p dec)
(let ((nvz (inr-val dec)))
(declare (ignore nvz))
(nvbfalse))
(error "decide:an_injection_should_be_a_list_with_header_inl_or_inr")))))
(if (inr-p dec)
(let ((nvz (inr-val dec)))
(declare (ignore nvz))
(nvisl nvbn2))
(error "decide:an_injection_should_be_a_list_with_header_inl_or_inr")))))))

(defun nvaneris_pax_v1_upd_bnum ()
(lambda (nvbnum)
(lambda (nvloc)
(let ((dec nvbnum))
(if (inl-p dec)
(let ((nvz (inl-val dec)))
(let ((pair nvz))
(let ((nvr (pair-fst pair))
(nvl (pair-snd pair)))
(declare (ignore nvl))
(funcall (funcall (nvaneris_pax_v1_mk_bnum)
(+ nvr 1))
nvloc))))
(if (inr-p dec)
(let ((nvz (inr-val dec)))
(declare (ignore nvz))
nvbnum)
(error "decide:an_injection_should_be_a_list_with_header_inl_or_inr")))))))

(defun nvaneris_pax_v1_when_preempted (nvCmd nvldrs_uid)
(declare (ignore nvCmd))
(lambda (nvldr)
(lambda (nvbnum)
(lambda (nvz)
(let ((pair nvz))
(let ((nvw (pair-fst pair))
(nvzz1 (pair-snd pair)))
(let ((pair nvzz1))
(let ((nvx (pair-fst pair))
(nvzz2 (pair-snd pair)))
(let ((pair nvzz2))
(let ((nvy (pair-fst pair))
(nvz_ (pair-snd pair)))
(if (inl-p (nvband (funcall (nvaneris_pax_v1_is_bnum)
nvbnum) (funcall (funcall (nvaneris_pax_v1_lt_bnum nvldrs_uid)
nvw)
nvbnum)))
(make-pair :fst (funcall (funcall (nvaneris_pax_v1_upd_bnum)
nvbnum)
nvldr) :snd (make-pair :fst (nvbfalse) :snd (make-pair :fst nvy :snd nvz_)))
(make-pair :fst nvw :snd (make-pair :fst nvx :snd (make-pair :fst nvy :snd nvz_))))))))))))))

(defun nvaneris_pax_v1_preempted_base-program (nvCmd nvdecision nvpropose nvzs)
(declare (ignore nvCmd))
(declare (ignore nvdecision))
(declare (ignore nvpropose))
(declare (ignore nvzs))
(nvbase-class-program (make-pair :fst "aneris_pax_v1" :snd (make-pair :fst "preempted" :snd (make-axiom)))))

(defun nvfrom-upto (nvn nvm)
(funcall (fix (lambda (nvfrom-upto)
(lambda (nvn)
(if (inl-p (nvlt_int nvn nvm))
(make-pair :fst nvn :snd (let ((nvn_ (+ nvn 1)))
(funcall (funcall nvfrom-upto)
nvn_)))
(make-axiom)))))
nvn))

(defun nvremove-combine (nvcmp nvl)
(funcall (fix (lambda (nvlist_ind)
(lambda (nvL)
(if (pair-p nvL)
(let ((pair nvL))
(let ((nvh (pair-fst pair))
(nvt (pair-snd pair)))
(let ((nvtst (funcall nvcmp
nvh)))
(if (inl-p (nveq_int nvtst 0))
nvt
(if (inl-p (nvlt_int 0 nvtst))
(make-pair :fst nvh :snd nvt)
(make-pair :fst nvh :snd (funcall (funcall nvlist_ind)
nvt)))))))
(if (axiom-p nvL)
(make-axiom)
(error "bottom"))))))
nvl))

(defun nvaneris_pax_v1_remove_from_missing ()
(lambda (nvslt)
(lambda (nvmissing)
(nvremove-combine (lambda (nvn)
(- nvn nvslt)) nvmissing))))

(defun nvaneris_pax_v1_add_slot_to_decided ()
(lambda (nvslt)
(lambda (nvz)
(let ((pair nvz))
(let ((nvmax (pair-fst pair))
(nvmissing (pair-snd pair)))
(if (inl-p (nvlt_int nvmax nvslt))
(make-pair :fst nvslt :snd (nvappend nvmissing (nvfrom-upto (+ nvmax 1) nvslt)))
(if (inl-p (nveq_int nvslt nvmax))
(make-pair :fst nvmax :snd nvmissing)
(make-pair :fst nvmax :snd (funcall (funcall (nvaneris_pax_v1_remove_from_missing)
nvslt)
nvmissing)))))))))

(defun nvaneris_pax_v1_filter_out_proposals (nvCmd)
(lambda (nvslt)
(lambda (nvproposals)
(nvremove-combine (lambda (nvprp)
(- nvslt (funcall (nvaneris_pax_v1_prp2slt nvCmd)
nvprp))) nvproposals))))

(defun nvaneris_pax_v1_when_decided (nvCmd)
(lambda (nvldr)
(declare (ignore nvldr))
(lambda (nvslt)
(lambda (nvz)
(let ((pair nvz))
(let ((nvw (pair-fst pair))
(nvzz1 (pair-snd pair)))
(let ((pair nvzz1))
(let ((nvx (pair-fst pair))
(nvzz2 (pair-snd pair)))
(let ((pair nvzz2))
(let ((nvy (pair-fst pair))
(nvz_ (pair-snd pair)))
(funcall (lambda (nvx_)
(funcall (lambda (nvx__)
(make-pair :fst nvw :snd (make-pair :fst nvx :snd (make-pair :fst nvx_ :snd nvx__))))
(funcall (funcall (nvaneris_pax_v1_add_slot_to_decided)
nvslt)
nvz_)))
(funcall (funcall (nvaneris_pax_v1_filter_out_proposals nvCmd)
nvslt)
nvy))))))))))))

(defun nvaneris_pax_v1_decided_base-program (nvCmd nvdecision nvpropose nvzs)
(declare (ignore nvCmd))
(declare (ignore nvdecision))
(declare (ignore nvpropose))
(declare (ignore nvzs))
(nvbase-class-program (make-pair :fst "aneris_pax_v1" :snd (make-pair :fst "decided" :snd (make-axiom)))))

(defun nvmemory-class4-program (nvinit nvtr1 nvpr1 nvtr2 nvpr2 nvtr3 nvpr3 nvtr4 nvpr4)
(nvloop-class-memory-program (nvparallel-class-program (nveclass1-program nvtr1 nvpr1) (nvparallel-class-program (nveclass1-program nvtr2 nvpr2) (nvparallel-class-program (nveclass1-program nvtr3 nvpr3) (nveclass1-program nvtr4 nvpr4)))) (lambda (nvloc)
(nvsingle-bag (funcall nvinit
nvloc)))))

(defun nvaneris_pax_v1_LeaderState-program (nvCmd nvdecision nvldrs_uid nvpropose nvzs)
(nvmemory-class4-program (nvaneris_pax_v1_init_leader nvCmd) (nvaneris_pax_v1_on_propose nvCmd) (nvaneris_pax_v1_propose_base-program nvCmd nvdecision nvpropose nvzs) (nvaneris_pax_v1_when_adopted nvCmd) (nvaneris_pax_v1_adopted_base-program nvCmd nvdecision nvpropose nvzs) (nvaneris_pax_v1_when_preempted nvCmd nvldrs_uid) (nvaneris_pax_v1_preempted_base-program nvCmd nvdecision nvpropose nvzs) (nvaneris_pax_v1_when_decided nvCmd) (nvaneris_pax_v1_decided_base-program nvCmd nvdecision nvpropose nvzs)))

(defun nvaneris_pax_v1_LeaderPropose-program (nvCmd nvdecision nvldrs_uid nvpropose nvzs)
(nveclass2-program (nveclass1-program (nvaneris_pax_v1_leader_propose nvCmd) (nvaneris_pax_v1_propose_base-program nvCmd nvdecision nvpropose nvzs)) (nvaneris_pax_v1_LeaderState-program nvCmd nvdecision nvldrs_uid nvpropose nvzs)))

(defun nvcons-bag (nvx nvb)
(make-pair :fst nvx :snd nvb))

(defun nvaneris_pax_v1_leader_adopted (nvCmd)
(lambda (nvloc)
(declare (ignore nvloc))
(lambda (nvzp)
(let ((pair nvzp))
(let ((nvbnum (pair-fst pair))
(nvpvals (pair-snd pair)))
(lambda (nvz)
(let ((pair nvz))
(let ((nvw (pair-fst pair))
(nvzz1 (pair-snd pair)))
(let ((pair nvzz1))
(let ((nvx (pair-fst pair))
(nvzz2 (pair-snd pair)))
(declare (ignore nvx))
(let ((pair nvzz2))
(let ((nvy (pair-fst pair))
(nvz_ (pair-snd pair)))
(if (inl-p (funcall (funcall (nvaneris_pax_v1_eq_bnums)
nvbnum)
nvw))
(funcall (funcall (fix (lambda (nvlist_accum)
(lambda (nvy_)
(lambda (nvL)
(if (pair-p nvL)
(let ((pair nvL))
(let ((nvh (pair-fst pair))
(nvt (pair-snd pair)))
(funcall (funcall (funcall nvlist_accum)
(nvcons-bag (funcall (funcall (nvaneris_pax_v1_mk_pv nvCmd)
nvbnum)
nvh) nvy_))
nvt)))
(if (axiom-p nvL)
nvy_
(error "bottom")))))))
(make-axiom))
(funcall (funcall (funcall (nvaneris_pax_v1_update_proposals nvCmd)
nvy)
nvz_)
nvpvals))
(make-axiom))))))))))))))

(defun nvaneris_pax_v1_LeaderAdopted-program (nvCmd nvdecision nvldrs_uid nvpropose nvzs)
(nveclass2-program (nveclass1-program (nvaneris_pax_v1_leader_adopted nvCmd) (nvaneris_pax_v1_adopted_base-program nvCmd nvdecision nvpropose nvzs)) (nvaneris_pax_v1_LeaderState-program nvCmd nvdecision nvldrs_uid nvpropose nvzs)))

(defun nvaneris_pax_v1_p2a_broadcast (nvCmd nvdecision nvpropose nvzs)
(declare (ignore nvCmd))
(declare (ignore nvdecision))
(declare (ignore nvpropose))
(declare (ignore nvzs))
(lambda (nvlocs)
(lambda (nvz)
(nvbag-map (lambda (nvl)
(nvmk-msg-interface nvl (nvmake-Msg (make-pair :fst "aneris_pax_v1" :snd (make-pair :fst "p2a" :snd (make-axiom))) nvz))) nvlocs))))

(defun nvaneris_pax_v1_CommanderNotify-program (nvCmd nvaccpts nvdecision nvpropose nvzs)
(lambda (nvpvalue)
(nvreturn-loc-bag-class-program (lambda (nvldr)
(funcall (funcall (nvaneris_pax_v1_p2a_broadcast nvCmd nvdecision nvpropose nvzs)
nvaccpts)
(make-pair :fst nvldr :snd nvpvalue))))))

(defun nvaneris_pax_v1_decision_broadcast (nvCmd nvdecision nvpropose nvzs)
(declare (ignore nvCmd))
(declare (ignore nvpropose))
(declare (ignore nvzs))
(lambda (nvlocs)
(lambda (nvz)
(nvbag-map (lambda (nvl)
(nvmk-msg-interface nvl (nvmake-Msg nvdecision nvz))) nvlocs))))

(defun nvaneris_pax_v1_decided_broadcast (nvCmd nvdecision nvpropose nvzs)
(declare (ignore nvCmd))
(declare (ignore nvdecision))
(declare (ignore nvpropose))
(declare (ignore nvzs))
(lambda (nvlocs)
(lambda (nvz)
(nvbag-map (lambda (nvl)
(nvmk-msg-interface nvl (nvmake-Msg (make-pair :fst "aneris_pax_v1" :snd (make-pair :fst "decided" :snd (make-axiom))) nvz))) nvlocs))))

(defun nvaneris_pax_v1_commander_output (nvCmd nvaccpts nvdecision nvldrs nvpropose nvreps nvzs)
(lambda (nvpvalue)
(lambda (nvldr)
(lambda (nvz)
(let ((pair nvz))
(let ((nvw (pair-fst pair))
(nvzz1 (pair-snd pair)))
(declare (ignore nvw))
(let ((pair nvzz1))
(let ((nvx (pair-fst pair))
(nvzz2 (pair-snd pair)))
(let ((pair nvzz2))
(let ((nvy (pair-fst pair))
(nvz_ (pair-snd pair)))
(lambda (nvwaitfor)
(let ((pair (funcall (nvaneris_pax_v1_dest_pv nvCmd)
nvpvalue)))
(let ((nvx_ (pair-fst pair))
(nvzz (pair-snd pair)))
(let ((pair nvzz))
(let ((nvy_ (pair-fst pair))
(nvz (pair-snd pair)))
(if (inl-p (nvband (funcall (funcall (nvaneris_pax_v1_eq_bnums)
nvx_)
nvx) (nveq_int nvy_ nvy)))
(if (inl-p (funcall (funcall (nvaneris_pax_v1_eq_bnums)
nvx_)
nvz_))
(if (inl-p (nvlt_int (nvbag-size nvwaitfor) (nvaneris_pax_v1_threshold nvaccpts)))
(nvbag-append (funcall (funcall (nvaneris_pax_v1_decision_broadcast nvCmd nvdecision nvpropose nvzs)
nvreps)
(funcall (funcall (nvaneris_pax_v1_mk_prp nvCmd)
nvy_)
nvz)) (funcall (funcall (nvaneris_pax_v1_decided_broadcast nvCmd nvdecision nvpropose nvzs)
nvldrs)
nvy_))
(make-axiom))
(nvsingle-bag (funcall (funcall (nvaneris_pax_v1_preempted_send nvCmd nvdecision nvpropose nvzs)
nvldr)
nvz_)))
(make-axiom)))))))))))))))))

(defun nvaneris_pax_v1_p2b_base-program (nvCmd nvdecision nvpropose nvzs)
(declare (ignore nvCmd))
(declare (ignore nvdecision))
(declare (ignore nvpropose))
(declare (ignore nvzs))
(nvbase-class-program (make-pair :fst "aneris_pax_v1" :snd (make-pair :fst "p2b" :snd (make-axiom)))))

(defun nvaneris_pax_v1_on_p2b ()
(lambda (nvbnum)
(lambda (nvslt)
(lambda (nvloc)
(declare (ignore nvloc))
(lambda (nvz)
(let ((pair nvz))
(let ((nvw (pair-fst pair))
(nvzz1 (pair-snd pair)))
(let ((pair nvzz1))
(let ((nvx (pair-fst pair))
(nvzz2 (pair-snd pair)))
(let ((pair nvzz2))
(let ((nvy (pair-fst pair))
(nvz_ (pair-snd pair)))
(lambda (nvwaitfor)
(if (inl-p (nvband (funcall (funcall (nvaneris_pax_v1_eq_bnums)
nvbnum)
nvx) (nvband (nveq_int nvslt nvy) (funcall (funcall (nvaneris_pax_v1_eq_bnums)
nvbnum)
nvz_))))
(nvbag-remove (lambda (nva)
(lambda (nvb)
(if (string= nva nvb)
(make-inl :val (make-axiom))
(make-inr :val (make-axiom))))) nvwaitfor nvw)
nvwaitfor)))))))))))))

(defun nvaneris_pax_v1_CommanderState-program (nvCmd nvaccpts nvdecision nvpropose nvzs)
(lambda (nvbn)
(lambda (nvs)
(nvstate-class1-program (lambda (nvloc)
(declare (ignore nvloc))
nvaccpts) (funcall (funcall (nvaneris_pax_v1_on_p2b)
nvbn)
nvs) (nvaneris_pax_v1_p2b_base-program nvCmd nvdecision nvpropose nvzs)))))

(defun nvaneris_pax_v1_CommanderOutput-program (nvCmd nvaccpts nvdecision nvldrs nvpropose nvreps nvzs)
(lambda (nvpvalue)
(let ((pair (funcall (nvaneris_pax_v1_dest_pv nvCmd)
nvpvalue)))
(let ((nvx (pair-fst pair))
(nvzz (pair-snd pair)))
(let ((pair nvzz))
(let ((nvy (pair-fst pair))
(nvz (pair-snd pair)))
(declare (ignore nvz))
(nvonce-class-program (nveclass2-program (nveclass1-program (funcall (nvaneris_pax_v1_commander_output nvCmd nvaccpts nvdecision nvldrs nvpropose nvreps nvzs)
nvpvalue) (nvaneris_pax_v1_p2b_base-program nvCmd nvdecision nvpropose nvzs)) (funcall (funcall (nvaneris_pax_v1_CommanderState-program nvCmd nvaccpts nvdecision nvpropose nvzs)
nvx)
nvy)))))))))

(defun nvaneris_pax_v1_Commander-program (nvCmd nvaccpts nvdecision nvldrs nvpropose nvreps nvzs)
(lambda (nvpvalue)
(nvparallel-class-program (funcall (nvaneris_pax_v1_CommanderNotify-program nvCmd nvaccpts nvdecision nvpropose nvzs)
nvpvalue) (funcall (nvaneris_pax_v1_CommanderOutput-program nvCmd nvaccpts nvdecision nvldrs nvpropose nvreps nvzs)
nvpvalue))))

(defun nvaneris_pax_v1_leader_preempted (nvCmd nvldrs_uid)
(declare (ignore nvCmd))
(lambda (nvldr)
(lambda (nvbnum)
(lambda (nvz)
(let ((pair nvz))
(let ((nvw (pair-fst pair))
(nvzz1 (pair-snd pair)))
(let ((pair nvzz1))
(let ((nvx (pair-fst pair))
(nvzz2 (pair-snd pair)))
(declare (ignore nvx))
(let ((pair nvzz2))
(let ((nvy (pair-fst pair))
(nvz_ (pair-snd pair)))
(declare (ignore nvy))
(declare (ignore nvz_))
(if (inl-p (nvband (funcall (nvaneris_pax_v1_is_bnum)
nvbnum) (funcall (funcall (nvaneris_pax_v1_lt_bnum nvldrs_uid)
nvw)
nvbnum)))
(nvsingle-bag (funcall (funcall (nvaneris_pax_v1_upd_bnum)
nvbnum)
nvldr))
(make-axiom))))))))))))

(defun nvaneris_pax_v1_LeaderPreempted-program (nvCmd nvdecision nvldrs_uid nvpropose nvzs)
(nveclass2-program (nveclass1-program (nvaneris_pax_v1_leader_preempted nvCmd nvldrs_uid) (nvaneris_pax_v1_preempted_base-program nvCmd nvdecision nvpropose nvzs)) (nvaneris_pax_v1_LeaderState-program nvCmd nvdecision nvldrs_uid nvpropose nvzs)))

(defun nvaneris_pax_v1_pong_send (nvCmd nvdecision nvpropose nvzs)
(declare (ignore nvCmd))
(declare (ignore nvdecision))
(declare (ignore nvpropose))
(declare (ignore nvzs))
(lambda (nvl)
(lambda (nvz)
(nvmk-msg-interface nvl (nvmake-Msg (make-pair :fst "aneris_pax_v1" :snd (make-pair :fst "pong" :snd (make-axiom))) nvz)))))

(defun nvaneris_pax_v1_ping_base-program (nvCmd nvdecision nvpropose nvzs)
(declare (ignore nvCmd))
(declare (ignore nvdecision))
(declare (ignore nvpropose))
(declare (ignore nvzs))
(nvbase-class-program (make-pair :fst "aneris_pax_v1" :snd (make-pair :fst "ping" :snd (make-axiom)))))

(defun nvhdf-compose0 (nvf nvX)
(funcall (fix (lambda (nvmk-hdf)
(lambda (nvs0)
(if (inl-p (nvhdf-halted nvs0))
(nvhdf-halt)
(nvhdf-run (lambda (nvm)
(let ((pair (let ((pair (nvhdf-ap nvs0 nvm)))
(let ((nvX_ (pair-fst pair))
(nvbs (pair-snd pair)))
(let ((nvout (nvbag-union (nvbag-map (lambda (nvx)
(funcall nvf
nvx)) nvbs))))
(make-pair :fst nvX_ :snd nvout))))))
(let ((nvs1 (pair-fst pair))
(nvb (pair-snd pair)))
(make-pair :fst (funcall (funcall nvmk-hdf)
nvs1) :snd nvb)))))))))
nvX))

(defun nveclass0-program (nvf nvpr)
(lambda (nvi)
(nvhdf-compose0 (funcall nvf
nvi) (funcall nvpr
nvi))))

(defun nvaneris_pax_v1_Leader-program (nvCmd nvaccpts nvdecision nvldrs nvldrs_uid nvpropose nvreps nvzs)
(nvparallel-class-program (nvparallel-class-program (nvparallel-class-program (nvparallel-class-program (nvbind-class-program (nvaneris_pax_v1_HigherLeader-program nvCmd nvdecision nvldrs nvldrs_uid nvpropose nvzs) (lambda (nvz)
(funcall (nvaneris_pax_v1_LeaderStart-program nvCmd nvaccpts nvdecision nvldrs_uid nvpropose nvzs)
nvz))) (nvbind-class-program (nvonce-class-program (nvaneris_pax_v1_start_base-program nvCmd nvdecision nvpropose nvzs)) (lambda (nvz)
(declare (ignore nvz))
(nvaneris_pax_v1_SpawnFirstScout-program nvCmd nvaccpts nvdecision nvldrs_uid nvpropose nvzs)))) (nvbind-class-program (nvparallel-class-program (nvaneris_pax_v1_LeaderPropose-program nvCmd nvdecision nvldrs_uid nvpropose nvzs) (nvaneris_pax_v1_LeaderAdopted-program nvCmd nvdecision nvldrs_uid nvpropose nvzs)) (lambda (nvz)
(funcall (nvaneris_pax_v1_Commander-program nvCmd nvaccpts nvdecision nvldrs nvpropose nvreps nvzs)
nvz)))) (nvbind-class-program (nvaneris_pax_v1_LeaderPreempted-program nvCmd nvdecision nvldrs_uid nvpropose nvzs) (lambda (nvz)
(funcall (nvaneris_pax_v1_Scout-program nvCmd nvaccpts nvdecision nvldrs_uid nvpropose nvzs)
nvz)))) (nveclass0-program (lambda (nvz)
(declare (ignore nvz))
(lambda (nvloc)
(nvsingle-bag (funcall (funcall (nvaneris_pax_v1_pong_send nvCmd nvdecision nvpropose nvzs)
nvloc)
(make-axiom))))) (nvaneris_pax_v1_ping_base-program nvCmd nvdecision nvpropose nvzs))))

(defun nvdeq-member (nveq nvx nvL)
(nvreduce (lambda (nva)
(lambda (nvb)
(nvbor (funcall (funcall nveq
nva)
nvx) nvb))) (nvbfalse) nvL))

(defun nvbag-deq-member (nveq nvx nvb)
(nvdeq-member nveq nvx nvb))

(defun nvclass-at-program (nvpr nvlocs)
(lambda (nvi)
(if (inl-p (nvbag-deq-member (lambda (nva)
(lambda (nvb)
(if (string= nva nvb)
(make-inl :val (make-axiom))
(make-inr :val (make-axiom))))) nvi nvlocs))
(funcall nvpr
nvi)
(nvhdf-halt))))

(defun nvaneris_pax_v1_p1a_base-program (nvCmd nvdecision nvpropose nvzs)
(declare (ignore nvCmd))
(declare (ignore nvdecision))
(declare (ignore nvpropose))
(declare (ignore nvzs))
(nvbase-class-program (make-pair :fst "aneris_pax_v1" :snd (make-pair :fst "p1a" :snd (make-axiom)))))

(defun nvaneris_pax_v1_dummy_ballot ()
(make-inr :val (make-axiom)))

(defun nvaneris_pax_v1_init_accepted (nvCmd)
(declare (ignore nvCmd))
(make-axiom))

(defun nvaneris_pax_v1_init_acceptor (nvCmd)
(make-pair :fst (nvaneris_pax_v1_dummy_ballot) :snd (nvaneris_pax_v1_init_accepted nvCmd)))

(defun nvaneris_pax_v1_max_bnum (nvldrs_uid)
(lambda (nvbn1)
(lambda (nvbn2)
(if (inl-p (funcall (funcall (nvaneris_pax_v1_leq_bnum nvldrs_uid)
nvbn1)
nvbn2))
nvbn2
nvbn1))))

(defun nvaneris_pax_v1_on_p1a (nvCmd nvldrs_uid)
(declare (ignore nvCmd))
(lambda (nvloc)
(declare (ignore nvloc))
(lambda (nvze)
(let ((pair nvze))
(let ((nvloc (pair-fst pair))
(nvbnum (pair-snd pair)))
(declare (ignore nvloc))
(lambda (nvz)
(let ((pair nvz))
(let ((nvballot_num (pair-fst pair))
(nvaccepted (pair-snd pair)))
(make-pair :fst (funcall (funcall (nvaneris_pax_v1_max_bnum nvldrs_uid)
nvbnum)
nvballot_num) :snd nvaccepted)))))))))

(defun nvaneris_pax_v1_on_p2a (nvCmd nvldrs_uid)
(lambda (nvloc)
(declare (ignore nvloc))
(lambda (nvzf)
(let ((pair nvzf))
(let ((nvloc (pair-fst pair))
(nvpvalue (pair-snd pair)))
(declare (ignore nvloc))
(lambda (nvz)
(let ((pair nvz))
(let ((nvballot_num (pair-fst pair))
(nvaccepted (pair-snd pair)))
(funcall (lambda (nvx)
(funcall (lambda (nvx_)
(funcall (lambda (nvx__)
(make-pair :fst nvx_ :snd nvx__))
(if (inl-p (funcall (funcall (nvaneris_pax_v1_leq_bnum nvldrs_uid)
nvballot_num)
nvx))
(funcall (funcall (nvaneris_pax_v1_add_pvalue nvCmd nvldrs_uid)
nvaccepted)
nvpvalue)
nvaccepted)))
(funcall (funcall (nvaneris_pax_v1_max_bnum nvldrs_uid)
nvx)
nvballot_num)))
(funcall (nvaneris_pax_v1_pv2bn nvCmd)
nvpvalue))))))))))

(defun nvaneris_pax_v1_p2a_base-program (nvCmd nvdecision nvpropose nvzs)
(declare (ignore nvCmd))
(declare (ignore nvdecision))
(declare (ignore nvpropose))
(declare (ignore nvzs))
(nvbase-class-program (make-pair :fst "aneris_pax_v1" :snd (make-pair :fst "p2a" :snd (make-axiom)))))

(defun nvstate-class2-program (nvinit nvtr1 nvpr1 nvtr2 nvpr2)
(nvloop-class-state-program (nvparallel-class-program (nveclass1-program nvtr1 nvpr1) (nveclass1-program nvtr2 nvpr2)) (lambda (nvloc)
(nvsingle-bag (funcall nvinit
nvloc)))))

(defun nvaneris_pax_v1_AcceptorState-program (nvCmd nvdecision nvldrs_uid nvpropose nvzs)
(nvstate-class2-program (lambda (nvloc)
(declare (ignore nvloc))
(nvaneris_pax_v1_init_acceptor nvCmd)) (nvaneris_pax_v1_on_p1a nvCmd nvldrs_uid) (nvaneris_pax_v1_p1a_base-program nvCmd nvdecision nvpropose nvzs) (nvaneris_pax_v1_on_p2a nvCmd nvldrs_uid) (nvaneris_pax_v1_p2a_base-program nvCmd nvdecision nvpropose nvzs)))

(defun nvaneris_pax_v1_p1b_send (nvCmd nvdecision nvpropose nvzs)
(declare (ignore nvCmd))
(declare (ignore nvdecision))
(declare (ignore nvpropose))
(declare (ignore nvzs))
(lambda (nvl)
(lambda (nvz)
(nvmk-msg-interface nvl (nvmake-Msg (make-pair :fst "aneris_pax_v1" :snd (make-pair :fst "p1b" :snd (make-axiom))) nvz)))))

(defun nvaneris_pax_v1_AcceptorsP1a-program (nvCmd nvdecision nvldrs_uid nvpropose nvzs)
(funcall (lambda (nvx)
(nveclass2-program (nveclass1-program nvx (nvaneris_pax_v1_p1a_base-program nvCmd nvdecision nvpropose nvzs)) (nvaneris_pax_v1_AcceptorState-program nvCmd nvdecision nvldrs_uid nvpropose nvzs)))
(lambda (nvloc)
(lambda (nvzh)
(let ((pair nvzh))
(let ((nvldr (pair-fst pair))
(nvbn (pair-snd pair)))
(lambda (nvz)
(let ((pair nvz))
(let ((nvbnum (pair-fst pair))
(nvpvals (pair-snd pair)))
(nvsingle-bag (funcall (funcall (nvaneris_pax_v1_p1b_send nvCmd nvdecision nvpropose nvzs)
nvldr)
(make-pair :fst nvloc :snd (make-pair :fst nvbn :snd (make-pair :fst nvbnum :snd nvpvals))))))))))))))

(defun nvaneris_pax_v1_p2b_send (nvCmd nvdecision nvpropose nvzs)
(declare (ignore nvCmd))
(declare (ignore nvdecision))
(declare (ignore nvpropose))
(declare (ignore nvzs))
(lambda (nvl)
(lambda (nvz)
(nvmk-msg-interface nvl (nvmake-Msg (make-pair :fst "aneris_pax_v1" :snd (make-pair :fst "p2b" :snd (make-axiom))) nvz)))))

(defun nvaneris_pax_v1_AcceptorsP2a-program (nvCmd nvdecision nvldrs_uid nvpropose nvzs)
(funcall (lambda (nvx)
(nveclass2-program (nveclass1-program nvx (nvaneris_pax_v1_p2a_base-program nvCmd nvdecision nvpropose nvzs)) (nvaneris_pax_v1_AcceptorState-program nvCmd nvdecision nvldrs_uid nvpropose nvzs)))
(lambda (nvloc)
(lambda (nvzi)
(let ((pair nvzi))
(let ((nvldr (pair-fst pair))
(nvpvalue (pair-snd pair)))
(lambda (nvz)
(let ((pair nvz))
(let ((nvbnum (pair-fst pair))
(nvz (pair-snd pair)))
(declare (ignore nvz))
(let ((pair (funcall (nvaneris_pax_v1_dest_pv nvCmd)
nvpvalue)))
(let ((nvx (pair-fst pair))
(nvzz (pair-snd pair)))
(let ((pair nvzz))
(let ((nvy (pair-fst pair))
(nvz (pair-snd pair)))
(declare (ignore nvz))
(nvsingle-bag (funcall (funcall (nvaneris_pax_v1_p2b_send nvCmd nvdecision nvpropose nvzs)
nvldr)
(make-pair :fst nvloc :snd (make-pair :fst nvx :snd (make-pair :fst nvy :snd nvbnum))))))))))))))))))

(defun nvaneris_pax_v1_Acceptor-program (nvCmd nvdecision nvldrs_uid nvpropose nvzs)
(nvparallel-class-program (nvaneris_pax_v1_AcceptorsP1a-program nvCmd nvdecision nvldrs_uid nvpropose nvzs) (nvaneris_pax_v1_AcceptorsP2a-program nvCmd nvdecision nvldrs_uid nvpropose nvzs)))

(defun nvaneris_pax_v1_main-program (nvCmd nvaccpts nvdecision nvldrs nvldrs_uid nvpropose nvreps nvzs)
(nvparallel-class-program (nvclass-at-program (nvaneris_pax_v1_Leader-program nvCmd nvaccpts nvdecision nvldrs nvldrs_uid nvpropose nvreps nvzs) nvldrs) (nvclass-at-program (nvaneris_pax_v1_Acceptor-program nvCmd nvdecision nvldrs_uid nvpropose nvzs) nvaccpts)))

(defun nvaneris_pax_v1_main-program-inst (nvCid nvOp nvaccpts nvldrs nvldrs_uid nvreps nvf)
(declare (ignore nvCid))
(declare (ignore nvOp))
(nvaneris_pax_v1_main-program "UNION" nvaccpts (make-pair :fst "aneris" :snd (make-pair :fst "decision" :snd (make-axiom))) nvldrs nvldrs_uid (make-pair :fst "aneris" :snd (make-pair :fst "pax" :snd (make-pair :fst "propose" :snd (make-axiom)))) nvreps nvf))

(defun nvlist (nvT)
(declare (ignore nvT))
"REC")

(defun nvaneris_cmd_deq (nvCid nvOp nveq_Cid nveq_Op)
(nvunion-deq "PRODUCT" "PRODUCT" (nvproduct-deq nvCid (nvlist "ATOM") nveq_Cid (nvlist-deq (nvatom-deq))) (nvproduct-deq nvCid nvOp nveq_Cid nveq_Op)))

(defun nvaneris_23_v1_when_new_proposal (nvCmd)
(declare (ignore nvCmd))
(lambda (nvloc)
(declare (ignore nvloc))
(lambda (nvzk)
(let ((pair nvzk))
(let ((nvn (pair-fst pair))
(nvc (pair-snd pair)))
(lambda (nvz)
(let ((pair nvz))
(let ((nvmax (pair-fst pair))
(nvmissing (pair-snd pair)))
(if (inl-p (nvbor (nvlt_int nvmax nvn) (nvdeq-member (nvint-deq) nvn nvmissing)))
(nvsingle-bag (make-pair :fst nvn :snd nvc))
(make-axiom))))))))))

(defun nvaneris_23_v1_propose_base-program (nvCmd nvnotify nvpropose nvf)
(declare (ignore nvCmd))
(declare (ignore nvnotify))
(declare (ignore nvf))
(nvbase-class-program nvpropose))

(defun nvaneris_23_v1_vote2prop (nvCmd)
(declare (ignore nvCmd))
(lambda (nvloc)
(declare (ignore nvloc))
(lambda (nvz)
(let ((pair nvz))
(let ((nvz (pair-fst pair))
(nvloc_ (pair-snd pair)))
(declare (ignore nvloc_))
(let ((pair nvz))
(let ((nvz (pair-fst pair))
(nvc (pair-snd pair)))
(let ((pair nvz))
(let ((nvn (pair-fst pair))
(nvi (pair-snd pair)))
(declare (ignore nvi))
(nvsingle-bag (make-pair :fst nvn :snd nvc)))))))))))

(defun nvaneris_23_v1_vote_base-program (nvCmd nvnotify nvpropose nvf)
(declare (ignore nvCmd))
(declare (ignore nvnotify))
(declare (ignore nvpropose))
(declare (ignore nvf))
(nvbase-class-program (make-pair :fst "aneris_23_v1" :snd (make-pair :fst "vote" :snd (make-axiom)))))

(defun nvaneris_23_v1_Proposal-program (nvCmd nvnotify nvpropose nvf)
(nvparallel-class-program (nvaneris_23_v1_propose_base-program nvCmd nvnotify nvpropose nvf) (nveclass0-program (nvaneris_23_v1_vote2prop nvCmd) (nvaneris_23_v1_vote_base-program nvCmd nvnotify nvpropose nvf))))

(defun nvlist-diff (nveq nvas nvbs)
(nvfilter (lambda (nva)
(nvbnot (nvdeq-member nveq nva nvbs))) nvas))

(defun nvaneris_23_v1_onnewpropose (nvCmd)
(declare (ignore nvCmd))
(lambda (nvzi)
(let ((pair nvzi))
(let ((nvn (pair-fst pair))
(nvc (pair-snd pair)))
(declare (ignore nvc))
(lambda (nvz)
(let ((pair nvz))
(let ((nvmax (pair-fst pair))
(nvmissing (pair-snd pair)))
(if (inl-p (nvlt_int nvmax nvn))
(make-pair :fst nvn :snd (nvappend nvmissing (nvfrom-upto (+ nvmax 1) nvn)))
(make-pair :fst nvmax :snd (nvlist-diff (nvint-deq) nvmissing (make-pair :fst nvn :snd (make-axiom))))))))))))

(defun nvaneris_23_v1_update_replica (nvCmd)
(lambda (nvloc)
(declare (ignore nvloc))
(lambda (nvzj)
(let ((pair nvzj))
(let ((nvn (pair-fst pair))
(nvc (pair-snd pair)))
(lambda (nvz)
(let ((pair nvz))
(let ((nvmax (pair-fst pair))
(nvmissing (pair-snd pair)))
(if (inl-p (nvbor (nvlt_int nvmax nvn) (nvdeq-member (nvint-deq) nvn nvmissing)))
(funcall (funcall (nvaneris_23_v1_onnewpropose nvCmd)
(make-pair :fst nvn :snd nvc))
(make-pair :fst nvmax :snd nvmissing))
(make-pair :fst nvmax :snd nvmissing))))))))))

(defun nvmemory-class1-program (nvinit nvtr nvpr)
(nvloop-class-memory-program (nveclass1-program nvtr nvpr) (lambda (nvloc)
(nvsingle-bag (funcall nvinit
nvloc)))))

(defun nvaneris_23_v1_ReplicaState-program (nvCmd nvnotify nvpropose nvf)
(nvmemory-class1-program (lambda (nvloc)
(declare (ignore nvloc))
(make-pair :fst 0 :snd (make-axiom))) (nvaneris_23_v1_update_replica nvCmd) (nvaneris_23_v1_Proposal-program nvCmd nvnotify nvpropose nvf)))

(defun nvaneris_23_v1_NewVoters-program (nvCmd nvnotify nvpropose nvf)
(nveclass2-program (nveclass1-program (nvaneris_23_v1_when_new_proposal nvCmd) (nvaneris_23_v1_Proposal-program nvCmd nvnotify nvpropose nvf)) (nvaneris_23_v1_ReplicaState-program nvCmd nvnotify nvpropose nvf)))

(defun nvaneris_23_v1_vote_broadcast (nvCmd nvnotify nvpropose nvf)
(declare (ignore nvCmd))
(declare (ignore nvnotify))
(declare (ignore nvpropose))
(declare (ignore nvf))
(lambda (nvlocs)
(lambda (nvz)
(nvbag-map (lambda (nvl)
(nvmk-msg-interface nvl (nvmake-Msg (make-pair :fst "aneris_23_v1" :snd (make-pair :fst "vote" :snd (make-axiom))) nvz))) nvlocs))))

(defun nvaneris_23_v1_newvote (nvCmd)
(declare (ignore nvCmd))
(lambda (nvni)
(lambda (nvzd)
(let ((pair nvzd))
(let ((nvze (pair-fst pair))
(nvsender (pair-snd pair)))
(let ((pair nvze))
(let ((nvni_ (pair-fst pair))
(nvc (pair-snd pair)))
(declare (ignore nvc))
(lambda (nvz)
(let ((pair nvz))
(let ((nvcmds (pair-fst pair))
(nvz (pair-snd pair)))
(declare (ignore nvcmds))
(nvband (funcall (funcall (nvproduct-deq "INT" "INT" (nvint-deq) (nvint-deq))
nvni)
nvni_) (nvbnot (nvdeq-member (lambda (nva)
(lambda (nvb)
(if (string= nva nvb)
(make-inl :val (make-axiom))
(make-inr :val (make-axiom))))) nvsender nvz)))))))))))))

(defun nvposs-maj (nveq nvL nvx)
(funcall (funcall (fix (lambda (nvlist_accum)
(lambda (nvy)
(lambda (nvL)
(if (pair-p nvL)
(let ((pair nvL))
(let ((nvh (pair-fst pair))
(nvt (pair-snd pair)))
(funcall (funcall (funcall nvlist_accum)
(let ((pair nvy))
(let ((nvn (pair-fst pair))
(nvx (pair-snd pair)))
(if (inl-p (funcall (funcall nveq
nvh)
nvx))
(make-pair :fst (+ nvn 1) :snd nvx)
(if (inl-p (nveq_int nvn 0))
(make-pair :fst 1 :snd nvh)
(make-pair :fst (- nvn 1) :snd nvx))))))
nvt)))
(if (axiom-p nvL)
nvy
(error "bottom")))))))
(make-pair :fst 0 :snd nvx))
nvL))

(defun nvaneris_23_v1_decided_send (nvCmd nvnotify nvpropose nvf)
(declare (ignore nvCmd))
(declare (ignore nvnotify))
(declare (ignore nvpropose))
(declare (ignore nvf))
(lambda (nvl)
(lambda (nvz)
(nvmk-msg-interface nvl (nvmake-Msg (make-pair :fst "aneris_23_v1" :snd (make-pair :fst "decided" :snd (make-axiom))) nvz)))))

(defun nvaneris_23_v1_retry_send (nvCmd nvnotify nvpropose nvf)
(declare (ignore nvCmd))
(declare (ignore nvnotify))
(declare (ignore nvpropose))
(declare (ignore nvf))
(lambda (nvl)
(lambda (nvz)
(nvmk-msg-interface nvl (nvmake-Msg (make-pair :fst "aneris_23_v1" :snd (make-pair :fst "retry" :snd (make-axiom))) nvz)))))

(defun nvaneris_23_v1_roundout (nvCmd nvcmdeq nvcoeff nvflrs nvnotify nvpropose nvf)
(lambda (nvloc)
(lambda (nvza)
(let ((pair nvza))
(let ((nvzb (pair-fst pair))
(nvsender (pair-snd pair)))
(declare (ignore nvsender))
(let ((pair nvzb))
(let ((nvzc (pair-fst pair))
(nvc (pair-snd pair)))
(let ((pair nvzc))
(let ((nvn (pair-fst pair))
(nvi (pair-snd pair)))
(lambda (nvz)
(let ((pair nvz))
(let ((nvcmds (pair-fst pair))
(nvz (pair-snd pair)))
(declare (ignore nvz))
(if (inl-p (nveq_int (nvlength nvcmds) (* nvcoeff nvflrs)))
(let ((pair (nvposs-maj nvcmdeq (make-pair :fst nvc :snd nvcmds) nvc)))
(let ((nvk (pair-fst pair))
(nvx (pair-snd pair)))
(if (inl-p (nveq_int nvk (+ (* nvcoeff nvflrs) 1)))
(nvsingle-bag (funcall (funcall (nvaneris_23_v1_decided_send nvCmd nvnotify nvpropose nvf)
nvloc)
(make-pair :fst nvn :snd nvx)))
(nvsingle-bag (funcall (funcall (nvaneris_23_v1_retry_send nvCmd nvnotify nvpropose nvf)
nvloc)
(make-pair :fst (make-pair :fst nvn :snd (+ nvi 1)) :snd nvx))))))
(make-axiom))))))))))))))

(defun nvaneris_23_v1_when_quorum (nvCmd nvcmdeq nvcoeff nvflrs nvnotify nvpropose nvf)
(lambda (nvni)
(lambda (nvloc)
(lambda (nvvt)
(lambda (nvstate)
(if (inl-p (funcall (funcall (funcall (nvaneris_23_v1_newvote nvCmd)
nvni)
nvvt)
nvstate))
(funcall (funcall (funcall (nvaneris_23_v1_roundout nvCmd nvcmdeq nvcoeff nvflrs nvnotify nvpropose nvf)
nvloc)
nvvt)
nvstate)
(make-axiom)))))))

(defun nvaneris_23_v1_addvote (nvCmd)
(declare (ignore nvCmd))
(lambda (nvzf)
(let ((pair nvzf))
(let ((nvzg (pair-fst pair))
(nvsender (pair-snd pair)))
(let ((pair nvzg))
(let ((nvni (pair-fst pair))
(nvc (pair-snd pair)))
(declare (ignore nvni))
(lambda (nvz)
(let ((pair nvz))
(let ((nvcmds (pair-fst pair))
(nvz (pair-snd pair)))
(make-pair :fst (make-pair :fst nvc :snd nvcmds) :snd (make-pair :fst nvsender :snd nvz)))))))))))

(defun nvaneris_23_v1_add_to_quorum (nvCmd)
(lambda (nvni)
(lambda (nvloc)
(declare (ignore nvloc))
(lambda (nvvt)
(lambda (nvstate)
(if (inl-p (funcall (funcall (funcall (nvaneris_23_v1_newvote nvCmd)
nvni)
nvvt)
nvstate))
(funcall (funcall (nvaneris_23_v1_addvote nvCmd)
nvvt)
nvstate)
nvstate))))))

(defun nvaneris_23_v1_QuorumState-program (nvCmd nvnotify nvpropose nvf)
(lambda (nvni)
(nvmemory-class1-program (lambda (nvloc)
(declare (ignore nvloc))
(make-pair :fst (make-axiom) :snd (make-axiom))) (funcall (nvaneris_23_v1_add_to_quorum nvCmd)
nvni) (nvaneris_23_v1_vote_base-program nvCmd nvnotify nvpropose nvf))))

(defun nvaneris_23_v1_Quorum-program (nvCmd nvcmdeq nvcoeff nvflrs nvnotify nvpropose nvf)
(lambda (nvni)
(nveclass2-program (nveclass1-program (funcall (nvaneris_23_v1_when_quorum nvCmd nvcmdeq nvcoeff nvflrs nvnotify nvpropose nvf)
nvni) (nvaneris_23_v1_vote_base-program nvCmd nvnotify nvpropose nvf)) (funcall (nvaneris_23_v1_QuorumState-program nvCmd nvnotify nvpropose nvf)
nvni))))

(defun nvaneris_23_v1_Round-program (nvCmd nvcmdeq nvcoeff nvflrs nvlocs nvnotify nvpropose nvf)
(lambda (nvz)
(let ((pair nvz))
(let ((nvni (pair-fst pair))
(nvc (pair-snd pair)))
(nvparallel-class-program (nvreturn-loc-bag-class-program (lambda (nvloc)
(funcall (funcall (nvaneris_23_v1_vote_broadcast nvCmd nvnotify nvpropose nvf)
nvlocs)
(make-pair :fst (make-pair :fst nvni :snd nvc) :snd nvloc)))) (nvonce-class-program (funcall (nvaneris_23_v1_Quorum-program nvCmd nvcmdeq nvcoeff nvflrs nvnotify nvpropose nvf)
nvni)))))))

(defun nvaneris_23_v1_notify_broadcast (nvCmd nvnotify nvpropose nvf)
(declare (ignore nvCmd))
(declare (ignore nvpropose))
(declare (ignore nvf))
(lambda (nvlocs)
(lambda (nvz)
(nvbag-map (lambda (nvl)
(nvmk-msg-interface nvl (nvmake-Msg nvnotify nvz))) nvlocs))))

(defun nvaneris_23_v1_decision (nvCmd nvclients nvnotify nvpropose nvf)
(lambda (nvn)
(lambda (nvloc)
(declare (ignore nvloc))
(lambda (nvz)
(let ((pair nvz))
(let ((nvm (pair-fst pair))
(nvc (pair-snd pair)))
(if (inl-p (nveq_int nvm nvn))
(funcall (funcall (nvaneris_23_v1_notify_broadcast nvCmd nvnotify nvpropose nvf)
nvclients)
(make-pair :fst nvm :snd nvc))
(make-axiom))))))))

(defun nvaneris_23_v1_decided_base-program (nvCmd nvnotify nvpropose nvf)
(declare (ignore nvCmd))
(declare (ignore nvnotify))
(declare (ignore nvpropose))
(declare (ignore nvf))
(nvbase-class-program (make-pair :fst "aneris_23_v1" :snd (make-pair :fst "decided" :snd (make-axiom)))))

(defun nvaneris_23_v1_Notify-program (nvCmd nvclients nvnotify nvpropose nvf)
(lambda (nvn)
(nvonce-class-program (nveclass0-program (funcall (nvaneris_23_v1_decision nvCmd nvclients nvnotify nvpropose nvf)
nvn) (nvaneris_23_v1_decided_base-program nvCmd nvnotify nvpropose nvf)))))

(defun nvaneris_23_v1_when_new_round (nvCmd)
(declare (ignore nvCmd))
(lambda (nvn)
(lambda (nvloc)
(declare (ignore nvloc))
(lambda (nvz)
(let ((pair nvz))
(let ((nvz (pair-fst pair))
(nvc (pair-snd pair)))
(let ((pair nvz))
(let ((nvm (pair-fst pair))
(nvi (pair-snd pair)))
(lambda (nvround)
(if (inl-p (nvband (nveq_int nvn nvm) (nvlt_int nvround nvi)))
(nvsingle-bag (make-pair :fst (make-pair :fst nvm :snd nvi) :snd nvc))
(make-axiom)))))))))))

(defun nvaneris_23_v1_retry_base-program (nvCmd nvnotify nvpropose nvf)
(declare (ignore nvCmd))
(declare (ignore nvnotify))
(declare (ignore nvpropose))
(declare (ignore nvf))
(nvbase-class-program (make-pair :fst "aneris_23_v1" :snd (make-pair :fst "retry" :snd (make-axiom)))))

(defun nvaneris_23_v1_vote2retry (nvCmd)
(declare (ignore nvCmd))
(lambda (nvloc)
(declare (ignore nvloc))
(lambda (nvz)
(let ((pair nvz))
(let ((nvz (pair-fst pair))
(nvsender (pair-snd pair)))
(declare (ignore nvsender))
(let ((pair nvz))
(let ((nvni (pair-fst pair))
(nvc (pair-snd pair)))
(nvsingle-bag (make-pair :fst nvni :snd nvc)))))))))

(defun nvaneris_23_v1_RoundInfo-program (nvCmd nvnotify nvpropose nvf)
(nvparallel-class-program (nvaneris_23_v1_retry_base-program nvCmd nvnotify nvpropose nvf) (nveclass0-program (nvaneris_23_v1_vote2retry nvCmd) (nvaneris_23_v1_vote_base-program nvCmd nvnotify nvpropose nvf))))

(defun nvaneris_23_v1_update_round (nvCmd)
(declare (ignore nvCmd))
(lambda (nvn)
(lambda (nvloc)
(declare (ignore nvloc))
(lambda (nvz)
(let ((pair nvz))
(let ((nvz (pair-fst pair))
(nvc (pair-snd pair)))
(declare (ignore nvc))
(let ((pair nvz))
(let ((nvm (pair-fst pair))
(nvi (pair-snd pair)))
(lambda (nvround)
(if (inl-p (nvband (nveq_int nvn nvm) (nvlt_int nvround nvi)))
nvi
nvround))))))))))

(defun nvaneris_23_v1_NewRoundsState-program (nvCmd nvnotify nvpropose nvf)
(lambda (nvn)
(nvmemory-class1-program (lambda (nvloc)
(declare (ignore nvloc))
0) (funcall (nvaneris_23_v1_update_round nvCmd)
nvn) (nvaneris_23_v1_RoundInfo-program nvCmd nvnotify nvpropose nvf))))

(defun nvaneris_23_v1_NewRounds-program (nvCmd nvnotify nvpropose nvf)
(lambda (nvn)
(nveclass2-program (nveclass1-program (funcall (nvaneris_23_v1_when_new_round nvCmd)
nvn) (nvaneris_23_v1_RoundInfo-program nvCmd nvnotify nvpropose nvf)) (funcall (nvaneris_23_v1_NewRoundsState-program nvCmd nvnotify nvpropose nvf)
nvn))))

(defun nvhdf-until (nvX nvY)
(funcall (fix (lambda (nvmk-hdf)
(lambda (nvs0)
(if (inl-p (nvhdf-halted (nvpi1 nvs0)))
(nvhdf-halt)
(nvhdf-run (lambda (nvm)
(let ((pair (let ((pair nvs0))
(let ((nvX (pair-fst pair))
(nvY (pair-snd pair)))
(let ((pair (nvhdf-ap nvX nvm)))
(let ((nvX_ (pair-fst pair))
(nvb (pair-snd pair)))
(let ((pair (nvhdf-ap nvY nvm)))
(let ((nvY_ (pair-fst pair))
(nvc (pair-snd pair)))
(make-pair :fst (make-pair :fst (if (inl-p (nvbag-null nvc))
nvX_
(nvhdf-halt)) :snd nvY_) :snd nvb)))))))))
(let ((nvs1 (pair-fst pair))
(nvb (pair-snd pair)))
(make-pair :fst (funcall (funcall nvmk-hdf)
nvs1) :snd nvb)))))))))
(make-pair :fst nvX :snd nvY)))

(defun nvuntil-class-program (nvxpr nvypr)
(lambda (nvi)
(nvhdf-until (funcall nvxpr
nvi) (funcall nvypr
nvi))))

(defun nvaneris_23_v1_Voter-program (nvCmd nvclients nvcmdeq nvcoeff nvflrs nvlocs nvnotify nvpropose nvf)
(lambda (nvzh)
(let ((pair nvzh))
(let ((nvn (pair-fst pair))
(nvc (pair-snd pair)))
(nvparallel-class-program (nvparallel-class-program (funcall (nvaneris_23_v1_Round-program nvCmd nvcmdeq nvcoeff nvflrs nvlocs nvnotify nvpropose nvf)
(make-pair :fst (make-pair :fst nvn :snd 0) :snd nvc)) (funcall (nvaneris_23_v1_Notify-program nvCmd nvclients nvnotify nvpropose nvf)
nvn)) (nvuntil-class-program (nvbind-class-program (funcall (nvaneris_23_v1_NewRounds-program nvCmd nvnotify nvpropose nvf)
nvn) (lambda (nvz)
(funcall (nvaneris_23_v1_Round-program nvCmd nvcmdeq nvcoeff nvflrs nvlocs nvnotify nvpropose nvf)
nvz))) (funcall (nvaneris_23_v1_Notify-program nvCmd nvclients nvnotify nvpropose nvf)
nvn)))))))

(defun nvaneris_23_v1_Replica-program (nvCmd nvclients nvcmdeq nvcoeff nvflrs nvlocs nvnotify nvpropose nvf)
(nvbind-class-program (nvaneris_23_v1_NewVoters-program nvCmd nvnotify nvpropose nvf) (lambda (nvz)
(funcall (nvaneris_23_v1_Voter-program nvCmd nvclients nvcmdeq nvcoeff nvflrs nvlocs nvnotify nvpropose nvf)
nvz))))

(defun nvaneris_23_v1_main-program (nvCmd nvclients nvcmdeq nvcoeff nvflrs nvlocs nvnotify nvpropose nvf)
(nvclass-at-program (nvaneris_23_v1_Replica-program nvCmd nvclients nvcmdeq nvcoeff nvflrs nvlocs nvnotify nvpropose nvf) nvlocs))

(defun nvaneris_23_v1_main-program-inst (nvCid nvOp nveq_Cid nveq_Op nvreps nvflrs nvlocs nvf)
(nvaneris_23_v1_main-program "UNION" nvreps (nvaneris_cmd_deq nvCid nvOp nveq_Cid nveq_Op) 2 nvflrs nvlocs (make-pair :fst "aneris" :snd (make-pair :fst "decision" :snd (make-axiom))) (make-pair :fst "aneris" :snd (make-pair :fst "23" :snd (make-pair :fst "propose" :snd (make-axiom)))) nvf))

(defun nvaneris_v1_init_slot_num ()
1)

(defun nvaneris_v1_init_active ()
(nvbfalse))

(defun nvaneris_v1_init_proposals (nvCid nvOp)
(declare (ignore nvCid))
(declare (ignore nvOp))
(make-axiom))

(defun nvaneris_v1_init_decisions (nvCid nvOp)
(declare (ignore nvCid))
(declare (ignore nvOp))
(make-axiom))

(defun nvaneris_v1_init_protocol ()
(make-pair :fst "2/3" :snd (make-axiom)))

(defun nvaneris_v1_init_state (nvCid nvOp)
(make-pair :fst (nvaneris_v1_init_slot_num) :snd (make-pair :fst (nvaneris_v1_init_active) :snd (make-pair :fst (nvaneris_v1_init_proposals nvCid nvOp) :snd (make-pair :fst (nvaneris_v1_init_decisions nvCid nvOp) :snd (nvaneris_v1_init_protocol))))))

(defun nvaneris_v1_out_tr (nvCid nvOp nvbcast nvdecision nvpax_propose nvresponse nvswap nvtt_propose nvf)
(declare (ignore nvCid))
(declare (ignore nvOp))
(declare (ignore nvbcast))
(declare (ignore nvdecision))
(declare (ignore nvpax_propose))
(declare (ignore nvresponse))
(declare (ignore nvswap))
(declare (ignore nvtt_propose))
(declare (ignore nvf))
(lambda (nvtr)
(lambda (nvloc)
(declare (ignore nvloc))
(lambda (nvx)
(lambda (nvz)
(let ((pair nvz))
(let ((nva (pair-fst pair))
(nvz (pair-snd pair)))
(declare (ignore nvz))
(funcall (funcall nvtr
nvx)
nva))))))))

(defun nvaneris_v1_same_command (nvCid nvOp nveq_Cid)
(declare (ignore nvCid))
(declare (ignore nvOp))
(lambda (nvza)
(let ((pair nvza))
(let ((nvcid1 (pair-fst pair))
(nvop1 (pair-snd pair)))
(declare (ignore nvop1))
(lambda (nvz)
(let ((pair nvz))
(let ((nvcid2 (pair-fst pair))
(nvop2 (pair-snd pair)))
(declare (ignore nvop2))
(funcall (funcall nveq_Cid
nvcid1)
nvcid2))))))))

(defun nvaneris_v1_same_command_tag (nvCid nvOp nveq_Cid)
(lambda (nvcmdt1)
(lambda (nvcmdt2)
(let ((dec nvcmdt1))
(if (inl-p dec)
(let ((nvnp1 (inl-val dec)))
(let ((dec nvcmdt2))
(if (inl-p dec)
(let ((nvnp2 (inl-val dec)))
(funcall (funcall (nvproduct-deq nvCid (nvlist "ATOM") nveq_Cid (nvlist-deq (nvatom-deq)))
nvnp1)
nvnp2))
(if (inr-p dec)
(let ((nvcmd2 (inr-val dec)))
(declare (ignore nvcmd2))
(nvbfalse))
(error "decide:an_injection_should_be_a_list_with_header_inl_or_inr")))))
(if (inr-p dec)
(let ((nvcmd1 (inr-val dec)))
(let ((dec nvcmdt2))
(if (inl-p dec)
(let ((nvnp2 (inl-val dec)))
(declare (ignore nvnp2))
(nvbfalse))
(if (inr-p dec)
(let ((nvcmd2 (inr-val dec)))
(funcall (funcall (nvaneris_v1_same_command nvCid nvOp nveq_Cid)
nvcmd1)
nvcmd2))
(error "decide:an_injection_should_be_a_list_with_header_inl_or_inr")))))
(error "decide:an_injection_should_be_a_list_with_header_inl_or_inr")))))))

(defun nvaneris_v1_pax_propose_broadcast (nvCid nvOp nvbcast nvdecision nvpax_propose nvresponse nvswap nvtt_propose nvf)
(declare (ignore nvCid))
(declare (ignore nvOp))
(declare (ignore nvbcast))
(declare (ignore nvdecision))
(declare (ignore nvresponse))
(declare (ignore nvswap))
(declare (ignore nvtt_propose))
(declare (ignore nvf))
(lambda (nvlocs)
(lambda (nvz)
(nvbag-map (lambda (nvl)
(nvmk-msg-interface nvl (nvmake-Msg nvpax_propose nvz))) nvlocs))))

(defun nvaneris_v1_tt_propose_broadcast (nvCid nvOp nvbcast nvdecision nvpax_propose nvresponse nvswap nvtt_propose nvf)
(declare (ignore nvCid))
(declare (ignore nvOp))
(declare (ignore nvbcast))
(declare (ignore nvdecision))
(declare (ignore nvpax_propose))
(declare (ignore nvresponse))
(declare (ignore nvswap))
(declare (ignore nvf))
(lambda (nvlocs)
(lambda (nvz)
(nvbag-map (lambda (nvl)
(nvmk-msg-interface nvl (nvmake-Msg nvtt_propose nvz))) nvlocs))))

(defun nvaneris_v1_propose (nvCid nvOp nvbcast nvdecision nveq_Cid nvpax_procs nvpax_propose nvresponse nvswap nvtt_procs nvtt_propose nvf)
(lambda (nvcmdt)
(lambda (nvz)
(let ((pair nvz))
(let ((nva (pair-fst pair))
(nvzz1 (pair-snd pair)))
(let ((pair nvzz1))
(let ((nvb (pair-fst pair))
(nvzz2 (pair-snd pair)))
(let ((pair nvzz2))
(let ((nvc (pair-fst pair))
(nvzz3 (pair-snd pair)))
(let ((pair nvzz3))
(let ((nvd (pair-fst pair))
(nve (pair-snd pair)))
(funcall (lambda (nvx)
(funcall (lambda (nvx_)
(make-pair :fst (make-pair :fst nva :snd (make-pair :fst (nvbtrue) :snd (make-pair :fst nvx :snd (make-pair :fst nvd :snd nve)))) :snd nvx_))
(if (inl-p (nvbor nvb (nvreduce (lambda (nvx)
(lambda (nvp)
(nvbor (funcall (funcall (nvaneris_v1_same_command_tag nvCid nvOp nveq_Cid)
nvcmdt)
nvx) nvp))) (nvbfalse) (nvmap (lambda (nvx_)
(nvpi2 nvx_)) nvd))))
(make-axiom)
(if (inl-p (funcall (funcall (nvlist-deq (nvatom-deq))
nve)
(make-pair :fst "paxos" :snd (make-axiom))))
(funcall (funcall (nvaneris_v1_pax_propose_broadcast nvCid nvOp nvbcast nvdecision nvpax_propose nvresponse nvswap nvtt_propose nvf)
nvpax_procs)
(make-pair :fst nva :snd nvcmdt))
(if (inl-p (funcall (funcall (nvlist-deq (nvatom-deq))
nve)
(make-pair :fst "2/3" :snd (make-axiom))))
(funcall (funcall (nvaneris_v1_tt_propose_broadcast nvCid nvOp nvbcast nvdecision nvpax_propose nvresponse nvswap nvtt_propose nvf)
nvtt_procs)
(make-pair :fst nva :snd nvcmdt))
(make-axiom))))))
(if (inl-p (nvreduce (lambda (nvx)
(lambda (nvp)
(nvbor (funcall (funcall (nvaneris_v1_same_command_tag nvCid nvOp nveq_Cid)
nvcmdt)
nvx) nvp))) (nvbfalse) (nvappend (nvmap (lambda (nvx)
(nvpi2 nvx)) nvd) nvc)))
nvc
(nvappend nvc (make-pair :fst nvcmdt :snd (make-axiom))))))))))))))))

(defun nvaneris_v1_propose_inl (nvCid nvOp nvbcast nvdecision nveq_Cid nvpax_procs nvpax_propose nvresponse nvswap nvtt_procs nvtt_propose nvf)
(lambda (nvnp)
(lambda (nvstate)
(funcall (funcall (nvaneris_v1_propose nvCid nvOp nvbcast nvdecision nveq_Cid nvpax_procs nvpax_propose nvresponse nvswap nvtt_procs nvtt_propose nvf)
(make-inl :val nvnp))
nvstate))))

(defun nvaneris_v1_swap_base-program (nvCid nvOp nvbcast nvdecision nvpax_propose nvresponse nvswap nvtt_propose nvf)
(declare (ignore nvCid))
(declare (ignore nvOp))
(declare (ignore nvbcast))
(declare (ignore nvdecision))
(declare (ignore nvpax_propose))
(declare (ignore nvresponse))
(declare (ignore nvtt_propose))
(declare (ignore nvf))
(nvbase-class-program nvswap))

(defun nvaneris_v1_propose_inr (nvCid nvOp nvbcast nvdecision nveq_Cid nvpax_procs nvpax_propose nvresponse nvswap nvtt_procs nvtt_propose nvf)
(lambda (nvcmd)
(lambda (nvstate)
(funcall (funcall (nvaneris_v1_propose nvCid nvOp nvbcast nvdecision nveq_Cid nvpax_procs nvpax_propose nvresponse nvswap nvtt_procs nvtt_propose nvf)
(make-inr :val nvcmd))
nvstate))))

(defun nvaneris_v1_bcast_base-program (nvCid nvOp nvbcast nvdecision nvpax_propose nvresponse nvswap nvtt_propose nvf)
(declare (ignore nvCid))
(declare (ignore nvOp))
(declare (ignore nvdecision))
(declare (ignore nvpax_propose))
(declare (ignore nvresponse))
(declare (ignore nvswap))
(declare (ignore nvtt_propose))
(declare (ignore nvf))
(nvbase-class-program nvbcast))

(defun nvaneris_v1_iterate_tr (nvCid nvOp nvbcast nvdecision nvpax_propose nvresponse nvswap nvtt_propose nvf)
(declare (ignore nvCid))
(declare (ignore nvOp))
(declare (ignore nvbcast))
(declare (ignore nvdecision))
(declare (ignore nvpax_propose))
(declare (ignore nvresponse))
(declare (ignore nvswap))
(declare (ignore nvtt_propose))
(declare (ignore nvf))
(lambda (nvtr)
(lambda (nvinit)
(lambda (nvops)
(funcall (funcall (fix (lambda (nvlist_accum)
(lambda (nvy)
(lambda (nvL)
(if (pair-p nvL)
(let ((pair nvL))
(let ((nvh (pair-fst pair))
(nvt (pair-snd pair)))
(funcall (funcall (funcall nvlist_accum)
(funcall (let ((pair nvy))
(let ((nva (pair-fst pair))
(nvb (pair-snd pair)))
(lambda (nvx)
(let ((pair (funcall (funcall nvtr
nvx)
nva)))
(let ((nvs_ (pair-fst pair))
(nvb_ (pair-snd pair)))
(make-pair :fst nvs_ :snd (nvbag-append nvb nvb_)))))))
nvh))
nvt)))
(if (axiom-p nvL)
nvy
(error "bottom")))))))
(make-pair :fst nvinit :snd (make-axiom)))
nvops)))))

(defun nvaneris_v1_response_broadcast (nvCid nvOp nvbcast nvdecision nvpax_propose nvresponse nvswap nvtt_propose nvf)
(declare (ignore nvCid))
(declare (ignore nvOp))
(declare (ignore nvbcast))
(declare (ignore nvdecision))
(declare (ignore nvpax_propose))
(declare (ignore nvswap))
(declare (ignore nvtt_propose))
(declare (ignore nvf))
(lambda (nvlocs)
(lambda (nvz)
(nvbag-map (lambda (nvl)
(nvmk-msg-interface nvl (nvmake-Msg nvresponse nvz))) nvlocs))))

(defun nvaneris_v1_perform (nvCid nvOp nvbcast nvclients nvdecision nvpax_propose nvresponse nvswap nvtt_propose nvf)
(lambda (nvcmdt)
(lambda (nvslot_num)
(lambda (nvprotocol)
(funcall (lambda (nvx)
(make-pair :fst (+ nvslot_num 1) :snd (make-pair :fst nvx :snd (funcall (funcall (nvaneris_v1_response_broadcast nvCid nvOp nvbcast nvdecision nvpax_propose nvresponse nvswap nvtt_propose nvf)
nvclients)
(make-pair :fst nvslot_num :snd nvcmdt)))))
(let ((dec nvcmdt))
(if (inl-p dec)
(let ((nvz (inl-val dec)))
(let ((pair nvz))
(let ((nvcid (pair-fst pair))
(nvnew_protocol (pair-snd pair)))
(declare (ignore nvcid))
nvnew_protocol)))
(if (inr-p dec)
(let ((nvz (inr-val dec)))
(let ((pair nvz))
(let ((nvcid (pair-fst pair))
(nvopr (pair-snd pair)))
(declare (ignore nvcid))
(declare (ignore nvopr))
nvprotocol)))
(error "decide:an_injection_should_be_a_list_with_header_inl_or_inr")))))))))

(defun nvaneris_v1_on_slot_num_cmd (nvCid nvOp nvbcast nvclients nvdecision nvpax_propose nvresponse nvswap nvtt_propose nvf)
(lambda (nvcmdt)
(lambda (nvz)
(let ((pair nvz))
(let ((nva (pair-fst pair))
(nvzz1 (pair-snd pair)))
(let ((pair nvzz1))
(let ((nvb (pair-fst pair))
(nvzz2 (pair-snd pair)))
(declare (ignore nvb))
(let ((pair nvzz2))
(let ((nvc (pair-fst pair))
(nvzz3 (pair-snd pair)))
(let ((pair nvzz3))
(let ((nvd (pair-fst pair))
(nve (pair-snd pair)))
(let ((pair (funcall (funcall (funcall (nvaneris_v1_perform nvCid nvOp nvbcast nvclients nvdecision nvpax_propose nvresponse nvswap nvtt_propose nvf)
nvcmdt)
nva)
nve)))
(let ((nvx (pair-fst pair))
(nvzz (pair-snd pair)))
(let ((pair nvzz))
(let ((nvy (pair-fst pair))
(nvz (pair-snd pair)))
(make-pair :fst (make-pair :fst nvx :snd (make-pair :fst (nvbfalse) :snd (make-pair :fst nvc :snd (make-pair :fst nvd :snd nvy)))) :snd nvz))))))))))))))))

(defun nvmapfilter (nvf nvP nvL)
(nvmap nvf (nvfilter nvP nvL)))

(defun nvaneris_v1_on_slot_num (nvCid nvOp nvbcast nvclients nvdecision nvpax_propose nvresponse nvswap nvtt_propose nvf)
(lambda (nvs)
(lambda (nvzc)
(let ((pair nvzc))
(let ((nva (pair-fst pair))
(nvzz1 (pair-snd pair)))
(let ((pair nvzz1))
(let ((nvb (pair-fst pair))
(nvzz2 (pair-snd pair)))
(let ((pair nvzz2))
(let ((nvc (pair-fst pair))
(nvzz3 (pair-snd pair)))
(let ((pair nvzz3))
(let ((nvd (pair-fst pair))
(nve (pair-snd pair)))
(if (inl-p (nveq_int nvs nva))
(funcall (lambda (nvx)
(funcall (funcall (funcall (nvaneris_v1_iterate_tr nvCid nvOp nvbcast nvdecision nvpax_propose nvresponse nvswap nvtt_propose nvf)
(nvaneris_v1_on_slot_num_cmd nvCid nvOp nvbcast nvclients nvdecision nvpax_propose nvresponse nvswap nvtt_propose nvf))
(make-pair :fst nva :snd (make-pair :fst nvb :snd (make-pair :fst nvc :snd (make-pair :fst nvd :snd nve)))))
nvx))
(nvmapfilter (lambda (nvx)
(nvpi2 nvx)) (lambda (nvz)
(let ((pair nvz))
(let ((nvs (pair-fst pair))
(nvz (pair-snd pair)))
(declare (ignore nvz))
(nveq_int nvs nva)))) nvd))
(make-pair :fst (make-pair :fst nva :snd (make-pair :fst nvb :snd (make-pair :fst nvc :snd (make-pair :fst nvd :snd nve)))) :snd (make-axiom))))))))))))))

(defun nvhd (nvl)
(funcall (fix (lambda (nvlist_ind)
(declare (ignore nvlist_ind))
(lambda (nvL)
(if (pair-p nvL)
(let ((pair nvL))
(let ((nvh (pair-fst pair))
(nvt (pair-snd pair)))
(declare (ignore nvt))
nvh))
(if (axiom-p nvL)
(make-axiom)
(error "bottom"))))))
nvl))

(defun nvquicksort (nvcmp nvL)
(funcall (fix (lambda (nvquicksort)
(lambda (nvL)
(if (inl-p (nvnull nvL))
nvL
(let ((nvx (nvhd nvL)))
(let ((nvL1 (nvfilter (lambda (nvz)
(nvlt_int 0 (funcall (funcall nvcmp
nvz)
nvx))) nvL)))
(let ((nvL2 (nvfilter (lambda (nvz)
(nvlt_int 0 (funcall (funcall nvcmp
nvx)
nvz))) nvL)))
(let ((nvL3 (nvfilter (lambda (nvz)
(nveq_int 0 (funcall (funcall nvcmp
nvx)
nvz))) nvL)))
(nvappend (funcall (funcall nvquicksort)
nvL1) (nvappend nvL3 (funcall (funcall nvquicksort)
nvL2)))))))))))
nvL))

(defun nvquicksort-int (nvL)
(nvquicksort (lambda (nvi)
(lambda (nvj)
(- nvj nvi))) nvL))

(defun nvaneris_v1_diff_command_tag (nvCid nvOp nveq_Cid)
(lambda (nvcmdt1)
(lambda (nvcmdt2)
(nvbnot (funcall (funcall (nvaneris_v1_same_command_tag nvCid nvOp nveq_Cid)
nvcmdt1)
nvcmdt2)))))

(defun nvaneris_v1_greater_eq_proposal (nvCid nvOp nveq_Cid)
(lambda (nvzb)
(let ((pair nvzb))
(let ((nvslt1 (pair-fst pair))
(nvcmdt1 (pair-snd pair)))
(lambda (nvz)
(let ((pair nvz))
(let ((nvslt2 (pair-fst pair))
(nvcmdt2 (pair-snd pair)))
(nvband (nvle_int nvslt2 nvslt1) (funcall (funcall (nvaneris_v1_same_command_tag nvCid nvOp nveq_Cid)
nvcmdt1)
nvcmdt2)))))))))

(defun nvaneris_v1_on_decision (nvCid nvOp nvbcast nvclients nvdecision nveq_Cid nvpax_procs nvpax_propose nvresponse nvswap nvtt_procs nvtt_propose nvf)
(lambda (nvze)
(let ((pair nvze))
(let ((nvs (pair-fst pair))
(nvcmdt (pair-snd pair)))
(lambda (nvzd)
(let ((pair nvzd))
(let ((nva (pair-fst pair))
(nvzz1 (pair-snd pair)))
(let ((pair nvzz1))
(let ((nvb (pair-fst pair))
(nvzz2 (pair-snd pair)))
(let ((pair nvzz2))
(let ((nvc (pair-fst pair))
(nvzz3 (pair-snd pair)))
(let ((pair nvzz3))
(let ((nvd (pair-fst pair))
(nve (pair-snd pair)))
(funcall (lambda (nvx)
(funcall (lambda (nvx_)
(funcall (lambda (nvx__)
(let ((pair (funcall (funcall (funcall (nvaneris_v1_iterate_tr nvCid nvOp nvbcast nvdecision nvpax_propose nvresponse nvswap nvtt_propose nvf)
(nvaneris_v1_on_slot_num nvCid nvOp nvbcast nvclients nvdecision nvpax_propose nvresponse nvswap nvtt_propose nvf))
(make-pair :fst nva :snd (make-pair :fst nvb :snd (make-pair :fst nvx_ :snd (make-pair :fst nvx :snd nve)))))
nvx__)))
(let ((nvz (pair-fst pair))
(nvmsgs1 (pair-snd pair)))
(let ((pair nvz))
(let ((nva (pair-fst pair))
(nvzz1 (pair-snd pair)))
(let ((pair nvzz1))
(let ((nvb (pair-fst pair))
(nvzz2 (pair-snd pair)))
(let ((pair nvzz2))
(let ((nvc (pair-fst pair))
(nvzz3 (pair-snd pair)))
(let ((pair nvzz3))
(let ((nvd (pair-fst pair))
(nve (pair-snd pair)))
(let ((pair (if (inl-p (nvbnot (nvnull nvc)))
(funcall (funcall (nvaneris_v1_propose nvCid nvOp nvbcast nvdecision nveq_Cid nvpax_procs nvpax_propose nvresponse nvswap nvtt_procs nvtt_propose nvf)
(nvhd nvc))
(make-pair :fst nva :snd (make-pair :fst nvb :snd (make-pair :fst nvc :snd (make-pair :fst nvd :snd nve)))))
(make-pair :fst (make-pair :fst nva :snd (make-pair :fst nvb :snd (make-pair :fst nvc :snd (make-pair :fst nvd :snd nve)))) :snd (make-axiom)))))
(let ((nvstate (pair-fst pair))
(nvmsgs2 (pair-snd pair)))
(make-pair :fst nvstate :snd (nvbag-append nvmsgs1 nvmsgs2)))))))))))))))
(nvquicksort-int (nvmap (lambda (nvx__)
(nvpi1 nvx__)) nvx))))
(nvfilter (funcall (nvaneris_v1_diff_command_tag nvCid nvOp nveq_Cid)
nvcmdt) nvc)))
(if (inl-p (nvreduce (lambda (nvx)
(lambda (nvp)
(nvbor (funcall (funcall (nvaneris_v1_greater_eq_proposal nvCid nvOp nveq_Cid)
(make-pair :fst nva :snd nvcmdt))
nvx) nvp))) (nvbfalse) nvd))
nvd
(make-pair :fst (make-pair :fst nvs :snd nvcmdt) :snd nvd))))))))))))))))

(defun nvaneris_v1_decision_base-program (nvCid nvOp nvbcast nvdecision nvpax_propose nvresponse nvswap nvtt_propose nvf)
(declare (ignore nvCid))
(declare (ignore nvOp))
(declare (ignore nvbcast))
(declare (ignore nvpax_propose))
(declare (ignore nvresponse))
(declare (ignore nvswap))
(declare (ignore nvtt_propose))
(declare (ignore nvf))
(nvbase-class-program nvdecision))

(defun nvstate-class3-program (nvinit nvtr1 nvpr1 nvtr2 nvpr2 nvtr3 nvpr3)
(nvloop-class-state-program (nvparallel-class-program (nveclass1-program nvtr1 nvpr1) (nvparallel-class-program (nveclass1-program nvtr2 nvpr2) (nveclass1-program nvtr3 nvpr3))) (lambda (nvloc)
(nvsingle-bag (funcall nvinit
nvloc)))))

(defun nvaneris_v1_ReplicaState-program (nvCid nvOp nvbcast nvclients nvdecision nveq_Cid nvpax_procs nvpax_propose nvresponse nvswap nvtt_procs nvtt_propose nvf)
(nvstate-class3-program (lambda (nvz)
(declare (ignore nvz))
(make-pair :fst (nvaneris_v1_init_state nvCid nvOp) :snd (make-axiom))) (funcall (nvaneris_v1_out_tr nvCid nvOp nvbcast nvdecision nvpax_propose nvresponse nvswap nvtt_propose nvf)
(nvaneris_v1_propose_inl nvCid nvOp nvbcast nvdecision nveq_Cid nvpax_procs nvpax_propose nvresponse nvswap nvtt_procs nvtt_propose nvf)) (nvaneris_v1_swap_base-program nvCid nvOp nvbcast nvdecision nvpax_propose nvresponse nvswap nvtt_propose nvf) (funcall (nvaneris_v1_out_tr nvCid nvOp nvbcast nvdecision nvpax_propose nvresponse nvswap nvtt_propose nvf)
(nvaneris_v1_propose_inr nvCid nvOp nvbcast nvdecision nveq_Cid nvpax_procs nvpax_propose nvresponse nvswap nvtt_procs nvtt_propose nvf)) (nvaneris_v1_bcast_base-program nvCid nvOp nvbcast nvdecision nvpax_propose nvresponse nvswap nvtt_propose nvf) (funcall (nvaneris_v1_out_tr nvCid nvOp nvbcast nvdecision nvpax_propose nvresponse nvswap nvtt_propose nvf)
(nvaneris_v1_on_decision nvCid nvOp nvbcast nvclients nvdecision nveq_Cid nvpax_procs nvpax_propose nvresponse nvswap nvtt_procs nvtt_propose nvf)) (nvaneris_v1_decision_base-program nvCid nvOp nvbcast nvdecision nvpax_propose nvresponse nvswap nvtt_propose nvf)))

(defun nvaneris_v1_Replica-program (nvCid nvOp nvbcast nvclients nvdecision nveq_Cid nvpax_procs nvpax_propose nvresponse nvswap nvtt_procs nvtt_propose nvf)
(nveclass0-program (lambda (nvz)
(declare (ignore nvz))
(lambda (nvx)
(nvpi2 nvx))) (nvaneris_v1_ReplicaState-program nvCid nvOp nvbcast nvclients nvdecision nveq_Cid nvpax_procs nvpax_propose nvresponse nvswap nvtt_procs nvtt_propose nvf)))

(defun nvaneris_v1_main-program (nvCid nvOp nvbcast nvclients nvdecision nveq_Cid nvpax_procs nvpax_propose nvreps nvresponse nvswap nvtt_procs nvtt_propose nvf)
(nvclass-at-program (nvaneris_v1_Replica-program nvCid nvOp nvbcast nvclients nvdecision nveq_Cid nvpax_procs nvpax_propose nvresponse nvswap nvtt_procs nvtt_propose nvf) nvreps))

(defun nvaneris_v1_main-program-inst (nvCid nvOp nveq_Cid nvclients nvreps nvpax_procs nvtt_procs nvf)
(nvaneris_v1_main-program nvCid nvOp (make-pair :fst "bcast" :snd (make-axiom)) nvclients (make-pair :fst "aneris" :snd (make-pair :fst "decision" :snd (make-axiom))) nveq_Cid nvpax_procs (make-pair :fst "aneris" :snd (make-pair :fst "pax" :snd (make-pair :fst "propose" :snd (make-axiom)))) nvreps (make-pair :fst "response" :snd (make-axiom)) (make-pair :fst "swap" :snd (make-axiom)) nvtt_procs (make-pair :fst "aneris" :snd (make-pair :fst "23" :snd (make-pair :fst "propose" :snd (make-axiom)))) nvf))

(defun nvaneris_v1_full-program (nvCid nvOp nveq_Cid nveq_Op nvaccpts nvldrs nvldrs_uid nvlocs nvreps nvclients nvflrs nvf)
(nvparallel-class-program (nvaneris_pax_v1_main-program-inst nvCid nvOp nvaccpts nvldrs nvldrs_uid nvreps nvf) (nvparallel-class-program (nvaneris_23_v1_main-program-inst nvCid nvOp nveq_Cid nveq_Op nvreps nvflrs nvlocs nvf) (nvaneris_v1_main-program-inst nvCid nvOp nveq_Cid nvclients nvreps nvldrs nvlocs nvf))))

(defun main ()
(lambda (nvCid)
(lambda (nvOp)
(lambda (nveq_Cid)
(lambda (nveq_Op)
(lambda (nvaccpts)
(lambda (nvldrs)
(lambda (nvldrs_uid)
(lambda (nvlocs)
(lambda (nvreps)
(lambda (nvclients)
(lambda (nvflrs)
(nvaneris_v1_full-program nvCid nvOp nveq_Cid nveq_Op nvaccpts nvldrs nvldrs_uid nvlocs nvreps nvclients nvflrs (nvaneris_v1_full_headers_fun nvCid nvOp))))))))))))))

